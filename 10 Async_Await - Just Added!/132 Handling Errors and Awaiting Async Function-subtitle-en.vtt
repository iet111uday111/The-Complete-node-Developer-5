WEBVTT

00:00.420 --> 00:04.380
We're going to kick this video off by converting both of these over to async functions they're good

00:04.380 --> 00:08.860
candidates because we do have promises and we could just await those promises instead.

00:08.910 --> 00:13.500
And then we're going to talk about errors how we can throw them how we can customize errors that get

00:13.500 --> 00:17.820
drowned by other code like these endpoints that's going to make it really useful and it'll make it a

00:17.820 --> 00:23.110
lot easier to actually use async away in the real world where you do need to handle errors.

00:23.280 --> 00:27.900
So to kick things off the first thing we're going to do is convert these two will do get exchange rate

00:27.900 --> 00:30.750
together and get countries will be your challenge.

00:30.750 --> 00:33.470
The first step I'm going to take is to make this an async function.

00:33.480 --> 00:35.440
Otherwise we can't use a wait.

00:35.550 --> 00:43.110
Then we're going to go ahead and set up a variable a constant response and we are going to set this

00:43.120 --> 00:49.690
equal to a wait and then we're going to await the following promise the one right here that comes back

00:49.690 --> 00:54.220
from X-posts dot get I'm going to copy paste it.

00:54.250 --> 00:59.080
Toss a semicolon at the end and the only thing left to do is to return this value.

00:59.110 --> 01:02.070
I'm going to take it and move it right there.

01:02.150 --> 01:05.230
Then we can remove all of the previous code we had and there we go.

01:05.240 --> 01:08.800
We now have the exact same functionality and it's a little bit nicer.

01:08.810 --> 01:16.940
Now the benefit isn't as drastic as the benefit from going to this to this guy but it is still indeed

01:17.090 --> 01:17.480
nice.

01:17.480 --> 01:19.850
And I do recommend using a sink anywhere you can.

01:20.170 --> 01:20.600
All right.

01:20.630 --> 01:21.980
Exact same functionality.

01:22.130 --> 01:25.670
Your challenge is now to convert this one using the exact same steps.

01:25.670 --> 01:30.400
I just went through this one shouldn't take too much and it shouldn't bring you too much trouble.

01:30.470 --> 01:33.420
Take a quick moment to knock this out pause the video.

01:33.420 --> 01:36.500
Test your work and when you're done click play.

01:36.500 --> 01:41.110
The functionality should be exactly the same.

01:41.110 --> 01:42.200
All right let's get to it.

01:42.200 --> 01:44.320
Step one mark in this one is a sink.

01:44.320 --> 01:50.860
Step two is creating that response variable and actually awaiting on the promise.

01:51.070 --> 01:54.220
We're going to await the following promise right here.

01:55.740 --> 01:57.000
Going to paste it in.

01:57.270 --> 02:00.910
And the last step is to just return the exact same thing.

02:02.120 --> 02:06.870
Area probably the fastest challenge we've ever done in this course.

02:07.040 --> 02:11.870
Now that we have both of these converted we're just going to test our work by saving the file as long

02:11.870 --> 02:13.580
as we get the exact same output.

02:13.580 --> 02:18.560
We will move on to talking about errors how we can catch them how we can throw them and how in general

02:18.680 --> 02:21.860
we can improve the errors that show up in our application.

02:21.860 --> 02:26.360
All right the new results just showed up and it is identical to the other two which means that we are

02:26.360 --> 02:27.550
good to go.

02:27.680 --> 02:30.890
Now I'd like to shift the discussion over to errors.

02:30.890 --> 02:35.240
Well we're going to do is get these endpoints to trigger errors and we're going to look at how exactly

02:35.240 --> 02:40.220
we can handle those and how he can tweak them to be something that's a little more useful because currently

02:40.430 --> 02:42.500
we're going to get back just a whole bunch of junk.

02:42.620 --> 02:47.510
So down below Step one is to actually print the error out to the screen so we can see what we're working

02:47.510 --> 02:48.620
with right here.

02:48.620 --> 02:50.230
We're going to catch the error.

02:52.070 --> 02:56.530
And we're going to print the air con. dot Lague be perfect.

02:56.540 --> 02:59.060
Now let's go ahead and start making some things fail.

02:59.060 --> 03:02.450
We're going to kick things off by making jet countries fail.

03:02.450 --> 03:03.710
That's the first call.

03:03.710 --> 03:05.660
Now this one only uses two.

03:05.660 --> 03:10.800
So all we have to do to get that to fail is to send in a bad two country code.

03:10.800 --> 03:16.520
I'm going to use NMM save the file and we'll see what we get over inside of the browser.

03:16.520 --> 03:22.700
Now what we're going to get back is a whole bunch of junk what's coming back here is actually X-posts

03:22.880 --> 03:27.650
response as the error information in us things like that status code right here you can see it was a

03:27.650 --> 03:30.860
404 with a message saying not found.

03:31.040 --> 03:36.710
This is letting us know that the country code we provided was not found by that endpoint.

03:36.710 --> 03:38.970
Now this is not particularly useful.

03:39.110 --> 03:44.180
We want to come up with something that is a little more useful like a message on able to get countries

03:44.180 --> 03:46.920
that use and am perfect.

03:46.940 --> 03:48.070
That would be great.

03:48.090 --> 03:55.370
So to do that we're going to tweak get countries we are going to go ahead and use a regular old try

03:56.090 --> 03:57.730
catch block.

03:57.920 --> 04:01.710
So we're going to set it up like this if the code in the try block throws an error.

04:01.730 --> 04:05.290
The catch block will run otherwise catch will never run.

04:05.460 --> 04:09.770
All we're going to do is take this code and move it inside try.

04:09.950 --> 04:13.700
So what we're doing is saying any time either of these lines throw an error.

04:13.760 --> 04:16.220
Run this code and provide the error.

04:16.220 --> 04:19.490
Now we know what the error is the error sucks it doesn't contain much of anything.

04:19.490 --> 04:22.740
So what we're going to do is just throw our own errors.

04:22.760 --> 04:28.640
Something that is human readable throw new error.

04:29.030 --> 04:31.540
And in this case we're going to stick with a template string.

04:31.570 --> 04:32.230
Whoops.

04:32.320 --> 04:34.040
Autocomplete getting a little Hatami there.

04:34.250 --> 04:41.500
And we're going to go ahead and set it up on Abel to get countries that use.

04:41.600 --> 04:47.960
And then we'll inject right before the period the currency code.

04:47.960 --> 04:54.800
Now if we go ahead and save the currency convert application with a bad two country code we're going

04:54.800 --> 05:01.250
to see unable to get countries that use m m m and we can access the message directly using the dot message

05:02.120 --> 05:04.260
that will improve the output even more.

05:04.260 --> 05:07.850
Now we just have a string and we can do anything we want with that string.

05:07.850 --> 05:11.840
It's very clear on able to get the countries that use them.

05:12.320 --> 05:15.680
Now let's go ahead and look at the next one in our list.

05:15.680 --> 05:19.010
That is the get exchange rate function.

05:19.070 --> 05:21.740
There are actually two things that can go wrong here.

05:21.770 --> 05:27.740
The x CEO's request can fail itself and we could also end up with a response that's valid.

05:27.800 --> 05:30.670
But the two status code is invalid.

05:30.710 --> 05:34.610
So in that case there would be no rate for it.

05:34.610 --> 05:41.390
Now we can go ahead and actually simulate this by coming out a few lines of code that's going to allow

05:41.390 --> 05:44.360
us to test get exchange rate in isolation.

05:44.360 --> 05:47.890
Now if I go ahead and mess this guy up.

05:47.980 --> 05:54.280
Q W e we can save the file and we are going to get another error or request fail with status code for

05:54.730 --> 05:55.920
twenty two.

05:56.010 --> 06:01.750
Well we're going to do again is go through that exact same process and it actually like you to do this

06:01.750 --> 06:08.470
so your challenge is going to be to wrap those two lines in a try catch block and then if catch runs

06:08.530 --> 06:11.850
you're going to throw a new error using the following format.

06:12.130 --> 06:21.470
Unable to get exchange rate for us a D and C A D.

06:21.470 --> 06:26.250
This is going to be from currency code and this will be the two currency code.

06:26.300 --> 06:30.920
So it takes some time to modify just this function save the program and you should see this message

06:30.920 --> 06:34.420
over here as opposed to the message that we're currently seeing.

06:34.490 --> 06:41.390
Obviously instead of USD and cod we will have Q W E and M M and knock this out pause the video and when

06:41.390 --> 06:46.510
you're done click Play All right let's go ahead and knock this one out.

06:46.520 --> 06:53.150
We're going to kick things off by setting up that try catch block.

06:53.280 --> 06:57.350
We are going to try to run this code if it runs.

06:57.360 --> 07:04.490
That would be very nice but if it doesn't we do want to handle that as well by throwing a new error

07:04.950 --> 07:05.800
right here.

07:05.860 --> 07:07.700
We're going to provide our message.

07:07.710 --> 07:10.430
It will just be a template string.

07:10.440 --> 07:21.280
Now the message I want to provide is unable to get exchange rate for the from currency code and the

07:21.310 --> 07:24.070
2 currency code followed by a period.

07:24.190 --> 07:25.140
Excellent.

07:25.150 --> 07:29.040
Now we can go ahead and save this and see what happens over inside of the browser.

07:29.040 --> 07:36.090
Unable to get exchange rate for UW and am now currently that's failing because from is invalid.

07:36.100 --> 07:39.660
But what if frome is valid whatever trying to go to US.

07:39.670 --> 07:46.990
D to and end this time around we are actually going to get something different here we just get undefined.

07:47.140 --> 07:55.530
Undefined is coming up because this right here this is indeed undefined response not data rates exists.

07:55.570 --> 08:01.960
We have a valid from country code so valid data comes back but the two country code does not exist which

08:01.960 --> 08:03.910
is where undefined comes from.

08:03.910 --> 08:08.240
We can always go ahead and fix that by creating a variable Konst right here.

08:08.260 --> 08:09.270
Right.

08:09.300 --> 08:14.610
And one side of the equal to that then a lot a little bit of if logic if there is a great great if there

08:14.610 --> 08:16.540
is not a rate that's fine too.

08:16.690 --> 08:21.760
If there is a rate we're just going to go ahead and return it if there's not a rate where it is going

08:21.760 --> 08:27.190
to go ahead and throw in new error which will trigger the catch block down below which will print this

08:27.190 --> 08:28.820
message to the screen.

08:28.840 --> 08:34.300
Now if we save the code using the same codes from down below we get the message once again unable to

08:34.300 --> 08:37.110
get the exchange rate for USD and MNM.

08:37.180 --> 08:42.830
Now this message is going to show up if Frum's invalid if 2 is invalid or if both are invalid.

08:42.850 --> 08:47.620
With that in place we now some little error handling set up and we can bring back the rest of the lines

08:47.710 --> 08:53.530
from our application if we run through the app using bad data they are unable to get countries that

08:53.530 --> 08:55.000
use NMM.

08:55.060 --> 09:01.930
Prince Let's switch it back over to valid country codes like USD and see a D It's actually use the euro

09:01.960 --> 09:03.560
for a change.

09:03.640 --> 09:09.040
And over inside of the browser we should get valid values since both of those country codes are indeed

09:09.220 --> 09:09.630
valid.

09:09.640 --> 09:11.790
Here we get the exchange rate.

09:11.860 --> 09:14.130
We get all of the countries that use the euro.

09:14.240 --> 09:18.070
We aren't getting any of our error messages which is fantastic.

09:18.070 --> 09:24.100
So by using regular techniques things from way way way back in javascript like try catch and throw new

09:24.100 --> 09:24.750
error.

09:24.790 --> 09:29.660
We're able to create a very nice set up using those async functions.

09:29.710 --> 09:32.840
That is it for this video and that is it for our little currency.

09:32.840 --> 09:34.320
Convert example.

09:34.330 --> 09:39.730
So at this point we've gone through two examples we went through the app promises example where we had

09:39.730 --> 09:41.590
a contrived set of data.

09:41.680 --> 09:46.020
We created a few functions and we got to explore the basics of Eysenck a way.

09:46.030 --> 09:51.790
Then we went through the currency convert example where we used to real API eyes and we did a little

09:51.790 --> 09:58.980
more robust error handling and the end of the day that both use the exact same async and await techniques.

09:59.110 --> 10:04.750
And hopefully you're starting to see how this can fit into our node applications in the next and final

10:04.750 --> 10:10.460
video we're actually going to use a sink and a way to make some changes to the node API.

10:10.570 --> 10:12.750
I'm very excited to get to that one.

10:12.790 --> 10:14.180
So stay tuned.

10:14.190 --> 10:15.920
I'll see you in the next one.
