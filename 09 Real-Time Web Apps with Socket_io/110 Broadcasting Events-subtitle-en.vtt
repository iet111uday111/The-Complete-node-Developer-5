WEBVTT

00:00.270 --> 00:05.310
Now that we have our customer event listeners any imitators in place it's time to actually wire up the

00:05.310 --> 00:06.370
message system.

00:06.450 --> 00:11.700
So when one user sends a message to the server it actually gets sent to every connected user.

00:11.700 --> 00:17.550
If I have two tabs open and I emit a create message event from one tab I should see the message arrive

00:17.550 --> 00:18.700
in the second one.

00:18.720 --> 00:23.400
Now to test things locally we're going to be using separate tabs but the same would work on Heroku with

00:23.400 --> 00:25.620
separate browsers on separate networks.

00:25.680 --> 00:28.350
As long as everyone has the same you are all in their browser.

00:28.350 --> 00:32.180
They are going to be connected regardless of which machine they're on.

00:32.250 --> 00:35.450
Now obviously for local hosts we don't have that privilege.

00:35.460 --> 00:40.590
But as we deployed to Heroku which we will be doing in this video we'll be able to test this out between

00:40.590 --> 00:45.480
say your phone and the browser running on your machine to get started.

00:45.480 --> 00:48.300
We're going to update the create message listener.

00:48.300 --> 00:52.360
Currently all we do is log the data to the screen instead of just logging it.

00:52.380 --> 00:57.030
We actually want to emit a new event a new message event to everybody.

00:57.030 --> 01:03.480
So every single connected user gets the message that was sent from a specific user in order to get that

01:03.480 --> 01:04.000
done.

01:04.020 --> 01:11.580
We're going to call a method on I O I know dot emit socket data it emits an event to a single connection

01:11.850 --> 01:16.570
i o data emit emits an event to every single connection here.

01:16.580 --> 01:23.220
We're going to emit the event new message specifying it as our first argument and the second argument

01:23.250 --> 01:24.580
as with socket data.

01:24.590 --> 01:27.020
MIT is the data you want to send.

01:27.210 --> 01:31.220
Now we know we're getting a from property and a Text property from the client.

01:31.230 --> 01:32.630
Those appear right here.

01:32.730 --> 01:39.080
Which means what we need to do is pass those along setting from equal to message dot from and setting

01:39.090 --> 01:42.920
text equal to a message dot text.

01:42.950 --> 01:48.030
Now alongside of Freman text we're also going to specify a created app property and this is going to

01:48.030 --> 01:53.640
get generated by the server to prevent a specific client from spoofing when a message was created.

01:54.670 --> 01:58.600
Created that gets set equal to a new date.

01:59.110 --> 02:04.770
And we're going to call the get time method to get that time stamp back which we've done before.

02:04.960 --> 02:08.210
Now that we have this in place we actually have messaging wired up.

02:08.290 --> 02:14.200
We can go ahead and remove our emit calls from both server dot J S and index dot.

02:14.220 --> 02:20.320
J.S. Right here make sure to save both files in with this in place we can go ahead and test this by

02:20.350 --> 02:25.090
opening up two connections to the server and emitting some events.

02:25.090 --> 02:30.160
I'm going to start up a server inside of the terminal using node Amman's server forward slash server

02:30.190 --> 02:38.740
J.S. and inside of the browser we can now open up two tabs both at localhost three thousand for both

02:38.730 --> 02:43.500
tabs I am going to open up the developer tools since that's currently the graphic user interface for

02:43.500 --> 02:44.560
our application.

02:44.580 --> 02:46.170
We don't have any forms just yet.

02:46.290 --> 02:51.600
Which means we need to use the council to run some statements we'll do the same thing for a second tab

02:51.870 --> 02:57.360
and notice that as soon as we open that second tab we get a second new user connected message in the

02:57.360 --> 02:57.990
terminal.

02:57.990 --> 03:03.060
You should be seeing this message when you have your two tabs open.

03:03.140 --> 03:08.120
Now that we have our two tabs open we can go ahead and emit a create message event from either one.

03:08.120 --> 03:14.450
I'm going to emit it from the second one by calling socket Datti MIT emitting a custom event.

03:14.450 --> 03:18.830
The event name is create message and it takes those two props.

03:18.830 --> 03:24.740
We just discussed the from property and the taxed property both of which I'm going to specify in this

03:24.800 --> 03:28.160
object from is going to get set equal to my first name.

03:28.190 --> 03:32.540
Andrew and text is going to get set equal to inside of quotes.

03:32.540 --> 03:36.400
This should work with this in place.

03:36.410 --> 03:38.650
I can now admit my event from the browser.

03:38.780 --> 03:43.880
It's going to go to the server which is going to send the message to every connected user including

03:43.880 --> 03:47.150
the currently connected user who sent the message.

03:47.270 --> 03:51.800
I'm going to hit enter it fires it off and you see we get new message right here we have the message

03:51.800 --> 03:52.650
we just created.

03:52.760 --> 03:59.030
But the cool thing is that over in the other tab We also have the message a message from one user reached

03:59.210 --> 04:03.490
a user in a separate tab which is fantastic.

04:03.680 --> 04:08.870
With this in place we don't have a very basic messaging system set up a user emits an event.

04:08.870 --> 04:14.210
It goes to the server and the server sends it to everyone else who is connected with this in place.

04:14.210 --> 04:17.800
I'd like to make a commit and deployed to Heroku so we can test it out.

04:17.810 --> 04:18.500
We're not done yet.

04:18.500 --> 04:22.970
We are going to set up a few more things and do a challenge but there's no reason we can't commit twice

04:22.970 --> 04:24.350
in one video.

04:24.350 --> 04:29.840
If I run get status I see I have my two changed files as expected I can then run get commit with the

04:29.840 --> 04:38.720
AM flag to specify a message for this commit something like emit new message on create message will

04:38.720 --> 04:40.070
get the job done.

04:40.100 --> 04:42.100
I can then go ahead and actually make the commit.

04:42.110 --> 04:48.320
Pushing it up to both get hub and Heroku get push is going to get it on get hub and get push Heroku

04:48.500 --> 04:53.870
master is going to deploy it alive to the Web and you'll be able to open up our chat application and

04:53.870 --> 05:00.140
make sure it works regardless of the browser computer or any other variable.

05:00.140 --> 05:00.630
Here we go.

05:00.650 --> 05:02.320
We are compressing and launching the app.

05:02.320 --> 05:04.010
It looks like everything is done.

05:04.070 --> 05:07.680
I'm going to go ahead and use Heroku open to open it up.

05:07.700 --> 05:11.590
This is going to open it up in my default browser and right you see we have.

05:11.590 --> 05:14.090
Welcome to the chat application.

05:14.090 --> 05:19.670
Now to demo this what I'm going to do is open up a separate browser window open up Firefox and type

05:19.670 --> 05:21.150
in the exact same.

05:21.170 --> 05:27.450
You are all going to copy this you Aurel then I'll grab the Firefox browser and making it smaller so

05:27.450 --> 05:32.170
we can quickly switch between the two opening up the Heroku app here.

05:32.190 --> 05:36.100
Now Firefox also has developer tools available via this menu.

05:36.150 --> 05:42.840
Here we have a developer section and we're looking for the web at cons. Now that we have this open we

05:42.840 --> 05:47.630
can go into the developer tools for our chrome tab connected to the Heroku application.

05:47.760 --> 05:51.770
And what we're going to do is he met an event using socket daily MIT.

05:51.810 --> 05:55.640
We're going to even get a create a message event.

05:55.650 --> 05:59.380
We're going to specify our custom properties inside of the object.

05:59.430 --> 06:06.050
We can go ahead and have from set to like and we can set the text equal to Heroku.

06:06.060 --> 06:09.830
Now when I go ahead and emit this that everything should work as expected.

06:09.870 --> 06:12.640
Calling socket data emit emitting create message.

06:12.660 --> 06:18.170
We have our data which means it's going to go to the Heroku server which will send it over to Firefox.

06:18.210 --> 06:19.360
I'm going to send this off.

06:19.350 --> 06:20.930
We get the new message right here.

06:21.000 --> 06:23.970
And over inside of Firefox we also have the message.

06:24.010 --> 06:24.900
It's from Mike.

06:24.900 --> 06:29.560
The text is Heroku and we have the created at time stamp added by our server.

06:29.640 --> 06:35.460
And with this in place we have a messaging system that only working locally but working on Heroku which

06:35.460 --> 06:40.800
means anybody in the world can visit this you are l they can emit the event and everyone else connected

06:40.830 --> 06:44.640
is going to see that event in the council.

06:44.700 --> 06:49.380
Now that we've tested it out across browser I am going to close down Firefox and we're going to move

06:49.380 --> 06:55.580
on to the second part of this video which is talking about a different way to emit events.

06:55.650 --> 07:01.110
Some events you want to send to everybody a new message should go to every single user including the

07:01.110 --> 07:04.560
one who sent it so it can show up inside of the list of messages.

07:04.680 --> 07:08.440
Other events on the other hand should only go to other people.

07:08.460 --> 07:14.950
So if user one admits an event it shouldn't go back to user want it should only go to user 2 and 3.

07:15.120 --> 07:20.430
A good example of this is when a user joins a chat room I want to print a little message like Andrew

07:20.460 --> 07:27.000
joined when someone joins and I want to print a message like welcome Andrew for the actual user who

07:27.120 --> 07:27.790
joined.

07:27.810 --> 07:32.880
So in this tab I would see welcome Andrew and over here I would see Andrew joined in order to get that

07:32.880 --> 07:33.240
done.

07:33.240 --> 07:38.330
We're going to look at a different way to meet events in the server.

07:38.350 --> 07:41.170
This is going to get done via broadcasting.

07:41.170 --> 07:47.460
Broadcasting is the term for a meeting and event to everybody but one specific user I'm going to start

07:47.460 --> 07:50.150
up the server once again using gnomon server.

07:50.160 --> 07:51.760
Forward slash server.

07:51.820 --> 07:56.720
J.S. and over inside of atom we can now tweak how we emit the event right here.

07:56.890 --> 08:01.420
Now this is going to be the final way we do things but we'll play around with broadcasting as well which

08:01.420 --> 08:05.920
means I'm going to comment this out as opposed to removing it to broadcast.

08:05.920 --> 08:08.530
We have to specify the individual socket.

08:08.530 --> 08:13.340
This lets the socket IO library know which user shouldn't get the event.

08:13.390 --> 08:18.730
In this case the user that we call right here is not going to get the event everyone else will.

08:18.790 --> 08:25.330
Now we need to call socket daat broadcast broadcast as an object that has its own emet function and

08:25.330 --> 08:29.530
its the exact same syntax as I o data MIT or socket data.

08:29.620 --> 08:32.250
The big difference is who it gets sent to.

08:32.320 --> 08:37.900
This is going to send the event to everybody but this socket which means if I fire a create message

08:37.900 --> 08:43.860
event the new message event will fire to everybody but myself and thats exactly what we can do here.

08:43.870 --> 08:48.690
Its going to be identical which means we can go ahead and pass in the message event name.

08:48.820 --> 08:50.530
The arguments are going to be identical.

08:50.530 --> 08:55.180
The first one is going to be the event name new message and the other one is going to be the object

08:55.180 --> 09:01.360
with our properties from equals message dot from text equals message dot text.

09:01.480 --> 09:11.080
And last up we have created at equal to a new time stamp new date dot yet time with this in place we

09:11.080 --> 09:14.570
are not going to see the messages we send but everybody else will.

09:14.650 --> 09:17.240
We can prove this by heading over to google chrome.

09:17.260 --> 09:23.720
I'm going to give both tabs a refresh and from the second tab once again we are going to emit an event

09:23.950 --> 09:29.260
and we can actually use the up arrow key inside of the Web Developer console to rerun one of our previous

09:29.260 --> 09:34.720
commands and that's exactly what I'm going to do here we're emitting a create message event with a from

09:34.720 --> 09:37.020
property set to and you add a text equal to.

09:37.030 --> 09:38.140
This should work.

09:38.320 --> 09:43.640
If I hit enter to send this off you're going to notice that this tab no longer receives the message.

09:43.750 --> 09:49.870
But if I go to localhost three 3000 we are getting new message showing up with the message data.

09:49.870 --> 09:57.040
This is because tab to broadcasted the event which means it only got received by other connections such

09:57.040 --> 10:04.430
as tap one or any other connected user with broadcasting in place it's time to set up your challenge.

10:04.570 --> 10:08.440
Now as I mentioned we're not going to actually use broadcast in this context.

10:08.440 --> 10:09.920
We're going to comment this out.

10:09.940 --> 10:15.050
So you have it for reference during the challenge and we're going to uncomment our old code.

10:15.070 --> 10:18.450
This is going to be the final way we emit messages.

10:18.460 --> 10:22.030
Your challenge is going to be to emit two events right here right.

10:22.030 --> 10:29.080
When a user connects you're going to first call socket emit to emit a message to the user who joined

10:29.380 --> 10:32.870
your message should come from the admin from admin.

10:33.910 --> 10:41.320
And the text should say something like welcome to the chat app.

10:41.540 --> 10:45.490
Now along with Sacket data you're also going to call socket.

10:45.500 --> 10:47.800
Broadcast dot emit.

10:47.970 --> 10:52.460
This is going to get sent to everybody but the user who joined which means you can go ahead and set

10:52.460 --> 10:59.520
from equal to admin once again and you can set text equal to new user joint.

10:59.570 --> 11:04.490
This means that when we join a chat room we're going to see a message greeting us and everyone else

11:04.490 --> 11:09.290
is going to see a message letting them know that someone else joined both of these events are going

11:09.290 --> 11:13.170
to be new message events just like we met one right here.

11:13.190 --> 11:17.690
We're going to have to specify from which is admen the text which is whatever I said it should be and

11:17.690 --> 11:19.400
created at.

11:19.400 --> 11:23.670
Go ahead and add those two statement calls here then go ahead and test it in the browser.

11:23.810 --> 11:27.010
Close your tabs open one then open a second one.

11:27.050 --> 11:32.570
The second one it should see the greeting and the first one should see the alert that a new user joined.

11:32.600 --> 11:34.040
Take a moment to knock this out.

11:34.040 --> 11:36.230
Test it in when you're done click play.

11:37.610 --> 11:43.400
Hopefully that went well and you were able to get both of those calls working as expected to kick things

11:43.400 --> 11:43.640
off.

11:43.640 --> 11:45.940
We're going to fill out the first call.

11:45.950 --> 11:53.520
This is a call to socket data MIT and this call is going to be responsible for greeting the individual

11:53.520 --> 11:54.300
user.

11:54.300 --> 12:00.660
We are still going to send an event of a type new message and we are still going to send the exact same

12:00.660 --> 12:06.000
data from text and created at the only difference here is that we're going to be generating all of the

12:06.000 --> 12:10.040
properties as opposed to getting some of them from the user like we do below.

12:10.470 --> 12:14.570
Let's get started with from this one is going to be from the admin.

12:14.640 --> 12:20.880
Any time we send a message via the server we'll call that admin and the text is going to be our little

12:20.880 --> 12:21.720
message.

12:22.380 --> 12:25.550
Welcome to the chat app.

12:25.680 --> 12:27.390
Later on we'll greet them by name.

12:27.400 --> 12:28.920
We don't have the information for the moment.

12:28.920 --> 12:33.780
So we're going to stick with a generic greeting with this call in place we can remove the comment and

12:33.780 --> 12:35.420
we can move onto the second one.

12:35.430 --> 12:40.780
This is our broadcast call that's going to alert every other user except for the one who joined that

12:40.800 --> 12:43.560
someone new is here to get that done.

12:43.560 --> 12:52.260
We're going to use socket dot broadcast Umit and we're going to emit a new message event providing our

12:52.260 --> 12:56.620
props from once again is going to get set equal to the string admin.

12:56.730 --> 12:59.790
The text is going to get set equal to our little message.

12:59.790 --> 13:06.210
New User joined and later on will also be adding a user name here but for now we'll keep it generic

13:06.480 --> 13:08.880
and last up is created at which I forgot.

13:08.880 --> 13:17.840
Up above created app is going to get set equal to a new date by calling the date get time method with

13:17.840 --> 13:19.410
the date in place for this call.

13:19.420 --> 13:21.330
We'll also add it for the one above.

13:21.640 --> 13:22.410
Excellent.

13:22.540 --> 13:26.670
Now we can remove our comment for the second call and we are done.

13:26.680 --> 13:29.990
The challenge everything should work as expected.

13:30.010 --> 13:34.540
The next thing you needed to do was test out that all of this is working as expected by heading into

13:34.540 --> 13:35.350
the browser.

13:35.350 --> 13:37.620
There's a couple ways you could have done it as long as you got it done.

13:37.620 --> 13:38.890
It doesn't really matter.

13:39.040 --> 13:44.500
I'm going to choose to close both of my old tabs I'm then going to open up the developer tools before

13:44.500 --> 13:47.270
ever visiting the page.

13:47.320 --> 13:49.410
Then we can go to localhost three thousand.

13:49.410 --> 13:51.550
And we should see a little message right here.

13:51.550 --> 13:56.230
Here we see a new message welcome into the chat app printing which is fantastic.

13:56.230 --> 13:59.770
Next up we want a test that the broadcast is working as expected.

13:59.770 --> 14:04.480
For the second tab I'm also going to open up the developer tools.

14:04.590 --> 14:09.120
I'm going to go to localhost three thousand once again and once again we get our little message.

14:09.120 --> 14:10.430
Welcome to the chat app.

14:10.440 --> 14:16.770
If we go to the first tab We also see that a new user joined and this is fantastic.

14:16.770 --> 14:23.160
With this in place we don't have a rudimentary but working messaging system which is a great place to

14:23.160 --> 14:24.050
start.

14:24.060 --> 14:28.550
We're going to continue on in the next video adding more features and building out the UI.

14:28.650 --> 14:32.700
But before we do that I am going to make a commit to save these changes.

14:32.730 --> 14:36.450
Let's go ahead and shut down the server and use get status.

14:36.450 --> 14:42.560
Then we can go ahead and run it get commit with the flag and specify a message right here.

14:42.630 --> 14:49.440
Greet new user and alert others.

14:49.680 --> 14:53.600
Once the commit is in place we can use get pushed to push it up to get a job.

14:53.610 --> 14:58.590
There's no need to deploy to Heroku right now although you could easily deploy and test if you feel

14:58.590 --> 14:59.920
so inclined.

14:59.970 --> 15:01.570
With this in place we are now done.

15:01.590 --> 15:03.230
I will see you in the next one
