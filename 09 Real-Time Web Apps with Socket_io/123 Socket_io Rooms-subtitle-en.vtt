WEBVTT

00:01.140 --> 00:06.360
In the last video we set up a event listener on the server listening for that joint event.

00:06.360 --> 00:11.550
And we did some validation this at least make sure we have the name and the room name both of which

00:11.580 --> 00:13.070
are going to be required.

00:13.110 --> 00:18.900
The real next step is to actually use the socket IO library to join rooms and this is not going to let

00:18.900 --> 00:22.890
us just join remans but it's also going to give us a different set of methods.

00:22.890 --> 00:28.560
We can choose to emit to everybody connected to the server or just to people in specific rooms.

00:28.560 --> 00:30.770
And that's exactly what we're going to be doing.

00:30.780 --> 00:35.340
We want to emit Chiat messages just to other people who are also in the room.

00:35.550 --> 00:42.510
Now in order to join what you do is you call socket dot joyn socket dot join takes a string the name

00:42.510 --> 00:43.770
and we have that name.

00:43.800 --> 00:49.130
It's available under harams dot room just like we used right here.

00:49.170 --> 00:50.530
And that is it.

00:50.580 --> 00:55.490
We now have a special place for people to talk who are in the same room.

00:55.620 --> 01:01.590
Now this is a string so it would be something like The Office fans or anything else and you have to

01:01.590 --> 01:04.010
join by the string value.

01:04.170 --> 01:07.180
Right here though Paramjit room will get the job done.

01:07.380 --> 01:14.130
Now you can also choose to leave a room using socket leave socket don't leave leaving a room by its

01:14.130 --> 01:19.020
name and the office fans for example this is going to kick you out of that group and you're not going

01:19.020 --> 01:23.340
to get those private messages the messages sent specifically to the group.

01:23.340 --> 01:27.130
Now the next step in the process is to figure out how to actually take advantage of this.

01:27.240 --> 01:32.070
Adding the user to the room is great but if we can't target them specifically and others in that room

01:32.070 --> 01:33.410
it's not very useful.

01:33.480 --> 01:38.730
Well it turns out we have a couple ways to do just that in order to illustrate how we're going to target

01:38.730 --> 01:40.100
specific users.

01:40.120 --> 01:43.050
Let's look at all the ways we've admitted events on the server.

01:43.110 --> 01:48.810
We've used IO and emit this admits it to every single connected user and that's currently what we're

01:48.810 --> 01:52.620
doing for things like create message a new message comes in.

01:52.740 --> 01:55.580
And we admitted to everyone connected.

01:55.590 --> 02:04.080
Next up we have used socket dot broadcasts dot emet we use that right here and as we know this sends

02:04.080 --> 02:10.370
the message to everyone connected to the socket server except for the current user.

02:10.560 --> 02:14.510
The last one we used inside of server dot J S is socket.

02:14.670 --> 02:15.780
We used it right here.

02:15.870 --> 02:19.830
This emits an event specifically to one user.

02:19.830 --> 02:24.990
Now we can take these events so we can convert them over to their room counterpart in order to send

02:24.990 --> 02:26.290
it to a specific room.

02:26.310 --> 02:29.210
We're going to be changing on the two method.

02:29.280 --> 02:31.270
This is going to look a little something like this.

02:31.410 --> 02:37.170
Let's say we want to emit an event to every single person connected to a room and let's just call this

02:37.170 --> 02:40.170
room the office fans for the moment to do that.

02:40.200 --> 02:47.340
We're going to call I know dot to dot to is a method and it takes the room name exactly as it was provided

02:47.340 --> 02:48.720
in the call to join.

02:48.720 --> 02:54.050
In our case that is going to be the office fans just like this.

02:54.060 --> 02:59.550
And then we would chain on a call to a Met and this is going to send an event to everybody connected

02:59.550 --> 03:02.380
to a room the office fans.

03:02.430 --> 03:07.530
Now we can also do the same thing with broadcast meaning that we want to send an event to everybody

03:07.530 --> 03:11.070
in a room except for the current user in order to do that.

03:11.130 --> 03:18.380
We would use the following socket datt broadcast adapt to.

03:18.590 --> 03:25.490
And this works just like the two method defined above the office fans would get passed in and on here

03:25.490 --> 03:26.650
we would call it met.

03:26.690 --> 03:32.030
This is going to send an event to everybody in the office fans room except for the current user or the

03:32.030 --> 03:35.780
one who's actually calling Sacket dot broadcast.

03:35.780 --> 03:40.130
Now the last way we've used a Mehta's socket Amet we're still going to use that when we want to send

03:40.130 --> 03:41.970
something to a specific user.

03:41.990 --> 03:45.890
There is no reason to target them by room since we just want to target them.

03:45.890 --> 03:51.710
This is the two ways we're going to emit two specific rooms in order to actually start wiring some of

03:51.710 --> 03:56.320
that up and we can do is take these two calls up above and we can move them down inside of join.

03:56.390 --> 04:00.950
Meaning that we're not going to tell someone that someone joined a run until it actually joined to the

04:00.950 --> 04:02.460
room by calling join.

04:02.600 --> 04:07.870
We're also not going to tell a user that they have joined around until the call has actually gone through.

04:07.940 --> 04:12.640
It might not go through if the data like the name or the room name are invalid.

04:12.860 --> 04:17.480
Let's take both of these calls and cut them out and we're just going to take them as they are and we're

04:17.480 --> 04:22.070
going to move them down into join for the moment we can move them down below our comments.

04:22.070 --> 04:27.380
I'm going to leave the comments in place so you have these as a reference down the line now right here

04:27.380 --> 04:30.710
we call socket Umit and we emit a new message.

04:30.770 --> 04:35.660
Welcome to the chat app and this line it is actually going to stay the same.

04:35.660 --> 04:39.390
We still just want to target the specific user or the next one is going to change though.

04:39.590 --> 04:45.020
Instead of broadcasting to every connected user We're going to broadcast to just users inside of the

04:45.020 --> 04:45.510
room.

04:45.530 --> 04:53.960
We just joined right here using socket broadcast dot to passing in harams dot room.

04:54.020 --> 04:58.430
We're going to emit a new message and this is going to let everyone know that a new user has joined

04:58.790 --> 05:04.730
instead of new user we can actually specify the name we have access to that right here is a template

05:04.730 --> 05:15.450
string injecting the name first programs name followed by has joined perfect now that we have this in

05:15.450 --> 05:17.630
place we can actually test things out.

05:17.700 --> 05:21.540
Well we're going to do is join a realm then we're going to have a second user join.

05:21.540 --> 05:23.870
And we should see the message right here.

05:23.880 --> 05:25.540
Their name has joined.

05:25.830 --> 05:29.790
We're also going to add a third user into the mix to make sure it's actually sending the message to

05:29.790 --> 05:32.700
just one room over inside of the browser.

05:32.700 --> 05:36.570
Let's get started by creating a user called User 1.

05:36.750 --> 05:41.340
This user is going to join a room called uppercase A.

05:41.360 --> 05:46.110
Now we're going to go ahead and create a second user by going to localhost 3000.

05:46.130 --> 05:51.180
This one can be called user 2 and we're going to join them be just like this.

05:51.230 --> 05:56.480
And if I go between room and room B you can see that no join message printed because we haven't joined

05:56.480 --> 05:57.380
the same room.

05:57.470 --> 06:01.370
We're on completely separate rooms so we should not be getting those messages.

06:01.370 --> 06:03.300
Next up we're going to add a third user.

06:03.410 --> 06:08.670
This user is also going to join a room a user 3 room name room.

06:08.930 --> 06:13.760
And we are going to hit join them when we hit join we can go through the tabs and see what data we get

06:13.760 --> 06:14.390
back.

06:14.390 --> 06:15.950
Here we get Welcome to the chat app.

06:15.950 --> 06:20.670
As expected this is only happening because we've successfully joined the room.

06:20.870 --> 06:23.900
Then in the second tab we get Welcome to the chat app too.

06:23.900 --> 06:28.130
There is no message greeting that other user because the other user joined room.

06:28.340 --> 06:33.790
And the first tab has our user three has joined message and this is fantastic.

06:33.800 --> 06:35.920
Both users are in the room.

06:36.050 --> 06:41.240
So this user should get a message when a new user joins and we've injected the name right here.

06:41.240 --> 06:48.210
As expected things were relatively easy for our joint event listener because we had access to both the

06:48.210 --> 06:50.510
name variable and the room variable.

06:50.520 --> 06:52.500
They were actually passed in as arguments.

06:52.500 --> 06:57.090
It's going to be a lot more difficult for create message and create location message.

06:57.090 --> 07:02.010
We're going to need to figure out a way to get the room back for the given socket so we can commit to

07:02.010 --> 07:03.450
just that room.

07:03.450 --> 07:06.690
We also need to set up that people list on the left hand side bar.

07:06.720 --> 07:11.640
We're going to need to figure out how to use that i o object to get a list of all the people by room

07:11.730 --> 07:12.450
name.

07:12.570 --> 07:18.150
All of that is going to be super important because currently the messages we emit some in message are

07:18.150 --> 07:22.620
for example they're going to show up to all users regardless of what room they're in.

07:22.800 --> 07:28.620
To get this working to get those private runs in place will be persisting that data it's coming up next

07:28.680 --> 07:29.860
so stay tuned.

07:29.860 --> 07:31.290
I will see you then
