WEBVTT

00:00.370 --> 00:06.420
In the last video we created a little chat page we can type in a name like Andrew and a room like Noad

00:06.420 --> 00:09.360
course and we can go ahead and join that room.

00:09.450 --> 00:13.350
Now when we do we're brought to the chat page but nothing is actually happening behind the scenes to

00:13.350 --> 00:14.890
use any of these values.

00:14.970 --> 00:17.800
They're showing up in the you are l but that's about it.

00:17.820 --> 00:23.100
The goal in this video is to take these values and pass them from the client to the server so the server

00:23.100 --> 00:25.130
can keep track of who's in which room.

00:25.260 --> 00:27.660
And we can set up that private communication.

00:27.690 --> 00:33.680
Currently if User 1 is in Noad course and user two is in re-act course both of them are going to be

00:33.680 --> 00:37.940
able to talk to each other because this data is not used.

00:38.220 --> 00:41.910
Now the first step in getting this data to the server is figuring out where it lives.

00:41.940 --> 00:44.330
This actually lives in the location object.

00:44.330 --> 00:47.060
We're going to use the council to just play around with it.

00:47.340 --> 00:50.730
Location is a global object as provided by your browser.

00:50.820 --> 00:53.340
And on it we have a whole bunch of really interesting things.

00:53.340 --> 00:59.970
Things like host hostname Tref origin path name what we're going to be using is search as you can see

00:59.970 --> 01:05.590
here search is the query string everything from the question mark to the end of the word course.

01:05.670 --> 01:10.560
What I have highlighted here the goal is to get this into a more useful format.

01:10.560 --> 01:13.620
Right now we have just the string we're going to need to parse this.

01:13.650 --> 01:15.890
We're actually going to use a library to do that.

01:15.900 --> 01:24.260
Now that we know where it lives we can access window that location dot search to get this value.

01:24.600 --> 01:29.370
Now I'm adding window up front just to make sure we're accessing the global location property as opposed

01:29.370 --> 01:32.730
to a local variable which may or may not exist called location.

01:32.730 --> 01:37.190
This is going to be the most foolproof way to fetch the query string.

01:37.530 --> 01:42.310
Now the next thing we're going to do is talk about programs and deep harams inside of J.

01:42.310 --> 01:48.390
Querrey we actually have access to the function we can access it by calling Jay query dot PERVAN and

01:48.390 --> 01:49.650
we can pass in an object.

01:49.650 --> 01:52.040
Let's go ahead and create a little object right here.

01:52.140 --> 01:55.700
We'll set name equal to your first name.

01:55.700 --> 01:59.960
I'm going to set it equal to Andrew and we'll set age equal to something like 25.

02:00.200 --> 02:04.760
Now when I run this statement J query is going to take that object and convert it into a set of parameters

02:04.760 --> 02:07.020
that could be added onto what you are out here.

02:07.070 --> 02:10.550
You can see we have name equals Andrew and age equals 25.

02:10.550 --> 02:14.100
This is similar to the format we had up above minus the question mark.

02:14.120 --> 02:18.950
All we'd have to do is add one onto the beginning and we would have a complete search string.

02:18.950 --> 02:23.960
Now the problem with Jay Querrey is that it cannot do it in the other direction meaning it cannot take

02:24.020 --> 02:27.620
this string and convert it back into an object which is kind of what we want.

02:27.770 --> 02:30.160
We want to be able to access this data easily.

02:30.170 --> 02:32.240
Currently that is just not possible.

02:32.240 --> 02:35.620
There's also quirks like encoding and plus characters.

02:35.630 --> 02:39.490
This was originally a space but it got converted to a plus by the form.

02:39.620 --> 02:41.720
We don't want to decode all of that too.

02:41.720 --> 02:50.020
Luckily there is a simple library we can include and we can grab it by going to Linx dot mead and I

02:50.110 --> 02:56.560
go forward slash and de-program Param takes your object and returns the string de-program takes the

02:56.560 --> 03:01.800
string and returns an object and here we have a simple just it's a really short function that we're

03:01.810 --> 03:03.680
going to be adding to our project.

03:03.880 --> 03:05.840
Let's go to the raw version of this page.

03:05.920 --> 03:10.210
Then we're going to save it using right click save as and we're going to add it right into a project.

03:11.750 --> 03:17.190
We have our public J.S. libs folder and right in here we'll simply save it as deep.

03:17.270 --> 03:22.020
J.S. Now once we have that file saved we can actually include it.

03:22.030 --> 03:27.990
This is going to make it much easier to work with the search data down below inside of Adam.

03:28.060 --> 03:31.290
I'm going to head over to chat Dom HTL.

03:31.300 --> 03:36.910
We're not going to need this in index HVM Al but inside of chat Scott H DML we are going to load it

03:36.910 --> 03:37.180
in.

03:37.180 --> 03:39.320
Down below we'll make a new script tag

03:43.540 --> 03:50.280
and we're going to go ahead and set the source equal to inside of quotes forward slash James forwards

03:50.280 --> 03:54.610
slash libs forward slash d Param dot J.

03:54.610 --> 03:55.350
S.

03:55.480 --> 03:56.670
Now when we save chat.

03:56.710 --> 03:58.930
HTL melon head back into the browser.

03:58.930 --> 04:03.310
We can actually refresh the page and play around with this in the council before ever adding it to our

04:03.310 --> 04:04.380
code.

04:04.390 --> 04:07.380
We now have access to Jay queery dot D parameter.

04:07.510 --> 04:12.370
If I run this statement we're going to get our function back confirming that it does exist and all we

04:12.370 --> 04:14.630
need to do is pass in the string.

04:14.650 --> 04:16.510
This is the search string.

04:16.510 --> 04:20.780
Window that location dot search.

04:21.050 --> 04:26.090
So we're taking that search string we're passing it into deep RAM and the resulting object is exactly

04:26.090 --> 04:26.930
what we want.

04:26.930 --> 04:31.410
We have a name property equal to Andrew and we have a room property equal to node space.

04:31.430 --> 04:37.520
Course all those special characters like the end symbol the question mark and the plus character they've

04:37.520 --> 04:41.450
all been removed and replaced with this nicely formatted object.

04:41.450 --> 04:46.700
This is what we're going to use inside of our client side code to get the values and pass them to the

04:46.700 --> 04:50.510
server which is what we're going to do right now inside of atom.

04:50.510 --> 04:56.870
This is all going to happen in chat Dhananjay s right here we have our connect callback function.

04:56.870 --> 05:02.300
This happens when we first connect and right away when we connect we're going to emit an event that's

05:02.300 --> 05:08.570
going to start the process of joining a room socket Io has a built in support for the idea of Romes

05:08.780 --> 05:13.260
creating these little isolated areas where only certain people can emit and listen to events.

05:13.280 --> 05:15.220
All of that gets set up on the server though.

05:15.260 --> 05:18.500
Which means right in here when we connect to the server.

05:18.620 --> 05:21.760
All we're going to do is emit an event called join.

05:21.770 --> 05:24.290
This is going to start the process.

05:24.350 --> 05:26.760
First up let's go ahead and grab our parameters.

05:26.780 --> 05:31.420
The ones that we just learned how to deep program over inside of the console.

05:31.510 --> 05:35.580
Var Parama equals J.

05:35.600 --> 05:42.040
Queried dot deep herem and we're going to pass in window ADOT location and search just like we did.

05:42.050 --> 05:47.630
But for now we have our object and we can go ahead and emit an event right here.

05:47.750 --> 05:52.610
We're going to call socket dot emit and the event that we're going to emit it's going to be a custom

05:52.610 --> 05:55.650
event we'll be creating is going to be called join.

05:55.670 --> 06:00.290
This is going to get emitted from the client and it's going to get listened to by the server when the

06:00.290 --> 06:04.760
server hears this you join in that it's going to go through the process of setting up the room.

06:04.760 --> 06:09.470
Now not all of that is going to happen in this video but we can get started if the data that we're going

06:09.470 --> 06:12.480
to send across is just going to be the Paramo object.

06:12.550 --> 06:17.480
It may or may not include everything we need we'll be doing a little validation on the server.

06:17.540 --> 06:21.240
And last but not least we are going to set up acknowledgements for this one.

06:21.290 --> 06:25.870
If someone does join the room we want to know that if someone doesn't we want to know that too because

06:25.870 --> 06:30.740
if they don't join the room it's most likely because they provided invalid data which means that we

06:30.740 --> 06:36.950
want to kick them back to that joined form forcing them to provide both a name and a room name right

06:36.950 --> 06:37.380
here.

06:37.430 --> 06:42.830
We can go ahead and set up our function and this function could take an argument.

06:42.840 --> 06:46.540
We're going to be setting it up ourselves so we can decide if it takes an argument.

06:46.650 --> 06:50.760
And it definitely does make sense for it to take one in this case.

06:50.760 --> 06:54.230
We're going to go ahead and provide any errors if there is an error.

06:54.330 --> 06:56.620
That's fine we'll be able to handle it if there is no error.

06:56.640 --> 06:57.690
That's great too.

06:57.690 --> 07:00.140
We'll go ahead and do something else right in here.

07:00.150 --> 07:07.020
We can do something if an error exists using if air and we can go ahead and add an else clause to if

07:07.020 --> 07:10.050
there is no error we want to do a different thing.

07:10.290 --> 07:12.150
Now we're not going to fill this out at the moment.

07:12.150 --> 07:16.800
Well we're going to do at this point in time is go ahead and actually set up the listener inside of

07:16.800 --> 07:17.260
server.

07:17.290 --> 07:24.120
As for join that is going to happen over in server J.S. we can make that the very first event just above

07:24.150 --> 07:29.720
create message right here Sacket dot on join.

07:29.800 --> 07:34.350
Now as we already know we are going to be taking some arguments in the callback function.

07:34.350 --> 07:36.130
We're going to get our parameters.

07:36.300 --> 07:40.680
We can call these programs and we're also going to get that call back functions since we are setting

07:40.680 --> 07:44.680
up acknowledgements inside of the join function.

07:44.680 --> 07:48.640
The first thing that we're going to want to do is actually validate the data that came through both

07:48.640 --> 07:50.890
the name and the room.

07:50.890 --> 07:54.170
These are both potential properties on Puranas.

07:54.190 --> 08:00.100
All we really care is that they are not empty strings meaning that it's not just a space it's not just

08:00.100 --> 08:06.220
an empty string and it's not a non string type like a number or an object something like this might

08:06.220 --> 08:11.770
have a length but it's not exactly going to be a valid username or a valid or room name in order to

08:11.770 --> 08:15.870
set up this validation which we're going to be doing other places to like create message.

08:15.940 --> 08:19.090
We're going to create a separate tills file in here.

08:19.090 --> 08:21.200
I'm going to call this validation Dot.

08:21.330 --> 08:25.830
Yes and this is where we can put some validators that we're going to need throughout the project.

08:25.930 --> 08:30.350
In this video we're going to create one called is real strength.

08:30.460 --> 08:35.440
This is going to verify that a value is of a type string and that it's not just a bunch of spaces it

08:35.440 --> 08:38.090
actually has real characters inside of it.

08:38.110 --> 08:41.030
We're going to set this equal to a function that takes a string.

08:41.050 --> 08:46.060
This is going to be the string we validate and it's actually not going to be terribly difficult.

08:46.090 --> 08:51.760
We're going to return and we're going to return in the following conditions it'll return true if it

08:51.790 --> 08:53.250
is a real string and false.

08:53.260 --> 08:59.110
If it's not first up we'll use Type of this is going to get the type of the string variable.

08:59.110 --> 09:02.150
This needs to equal in quotes string.

09:02.170 --> 09:08.200
Now currently this is going to return true for any string and false for any non string value.

09:08.410 --> 09:11.080
But it does not take into account these spaces.

09:11.080 --> 09:17.380
What we're going to do is use the trim method available on Strang's which takes a string like this and

09:17.380 --> 09:19.300
converts it into a string like this.

09:19.300 --> 09:25.030
Trimming all whitespace if you pass a string like this it's going to convert it into a string like this.

09:25.030 --> 09:27.760
Trimming leading and trailing whitespace only.

09:27.790 --> 09:30.120
It's not going to trim any interior spacing.

09:30.190 --> 09:36.220
So if I have space are down below I am still gonna get that space between F and R but all of the leading

09:36.220 --> 09:38.490
and trailing spaces are removed.

09:38.650 --> 09:40.090
We're going to use that right here.

09:42.800 --> 09:49.130
As TR ADOT trim has a length greater than zero after we called trim.

09:49.130 --> 09:51.190
We do need a length greater than zero.

09:51.200 --> 09:53.510
Otherwise we have an empty string.

09:53.510 --> 09:58.700
This is going to be R is real string function and we're going to go ahead and export it real quickly.

09:58.710 --> 10:05.330
Module exports setting it equal to an object where we set is real string equal to the is real string

10:05.330 --> 10:07.530
function as defined above.

10:07.580 --> 10:08.540
Awesome.

10:08.570 --> 10:10.610
Now I can go ahead and save this file.

10:10.730 --> 10:16.700
I'm also going to go ahead and inside of server J S call this function we need to import it first before

10:16.700 --> 10:19.820
we can actually validate those two properties just up above.

10:19.820 --> 10:26.750
We're going to do that right here and we can make a contest and use E.S. six destructuring to grab is

10:27.110 --> 10:35.130
real string and we're gonna grab it using require we're requiring a local file dot forward slash it's

10:35.150 --> 10:38.350
in that utility directory and the file name is validation.

10:38.390 --> 10:39.530
Just like this.

10:39.570 --> 10:43.280
Now we can call is real string inside of join.

10:43.280 --> 10:44.920
That's exactly what we're going to do.

10:44.930 --> 10:49.970
We're going to check if either of them are not real strings if one or more are not real strings.

10:49.970 --> 10:54.010
We're going to call the call back passing in the error right here.

10:54.290 --> 11:00.680
If Prim's dot name is the first one we're going to pass that into is real string

11:04.020 --> 11:07.660
harams dot name.

11:07.670 --> 11:12.800
Now we want to check if it's not a real string so we're going to flip that or.

11:12.910 --> 11:18.260
And here we're going to check if the other property the room name is not a real string.

11:18.310 --> 11:27.590
Now inside of the query string that is called Room a back inside of Adam if it's not is real string

11:27.740 --> 11:31.750
passing in the correct value Puranas room then that's going to be an error too.

11:31.760 --> 11:34.680
And right here we can handle that error.

11:34.940 --> 11:44.040
All I'm going to do is call the callback with a little string message name and room name are required.

11:44.180 --> 11:45.250
Perfect.

11:45.260 --> 11:49.940
Now if that's not the case we do still want to call the call back but we don't want to pass any arguments

11:49.940 --> 11:54.010
and because remember that first argument we set that up to be the error argument.

11:54.140 --> 11:59.250
And if both things are valid we do not want to pass any errors back over inside of a server.

11:59.250 --> 12:03.080
J.S. we now have some pretty basic validation set up.

12:03.080 --> 12:07.010
And before we actually do anything in here which is going to be in the upcoming videos all we're going

12:07.010 --> 12:10.730
to do is add a few cases right here.

12:10.730 --> 12:15.910
If it isn't air that's a pretty big problem and we're going to want to send the user back to the root

12:15.920 --> 12:22.310
of the application by changing one of the properties under location window and data location.

12:22.570 --> 12:26.370
RATH here we can manipulate which page the users on.

12:26.420 --> 12:31.160
Essentially we're going to be read you're writing them back to that root page by having the forward

12:31.160 --> 12:34.690
slash value set to the H ref property.

12:34.880 --> 12:39.830
Now before we do that we can do whatever we like maybe we want to splay a modal using our framework

12:39.830 --> 12:44.590
of choice whether it's foundation bootstrap or anything else to keep things simple here.

12:44.600 --> 12:48.410
All we're going to do is call alert passing in the error just like this.

12:48.560 --> 12:50.990
So a user will see a little alert box.

12:50.990 --> 12:54.910
They'll then click OK and they'll be redirected back to the home page.

12:54.920 --> 12:56.440
Now if there is no error.

12:56.570 --> 12:59.860
All we're going to do for the moment is use console dialog.

13:01.070 --> 13:04.610
To print no error.

13:04.660 --> 13:05.650
Awesome.

13:05.650 --> 13:07.660
With this in place let's go ahead and test that.

13:07.660 --> 13:09.640
Things are working as expected.

13:09.640 --> 13:13.390
Over inside of the browser I'm going to get my current pager refreshed.

13:13.390 --> 13:16.520
Now here we do have a valid name and a valid room.

13:16.540 --> 13:21.250
So when I click refresh we should see no error printing in the council and that's exactly what we get

13:21.460 --> 13:21.870
the data.

13:21.880 --> 13:24.670
We passed through was indeed valid.

13:24.670 --> 13:29.710
Now we can go ahead and go to the root of the page and try some invalid data to demonstrate this.

13:29.710 --> 13:32.760
All I'm going to do is click join without providing either value.

13:32.770 --> 13:36.850
This is going to bring us to the chat app and you can see we can get our little alert box name and room

13:36.850 --> 13:38.080
name are required.

13:38.080 --> 13:43.280
We click OK which is all we can do and we're immediately redirected back to join a chat.

13:43.570 --> 13:51.040
If I do provide some valid data like I display name of Mike and a room name of developers we are going

13:51.040 --> 13:55.930
to be brought to the chat page and we'll see no error shows up which is fantastic.

13:55.930 --> 13:59.200
Now one last test real quick if we have just spaces.

13:59.230 --> 14:02.620
I'm going to change the room name to a bunch of spaces and we click join.

14:02.620 --> 14:08.140
We are going to still get the error even though we do have a bunch of plus signs for spaces up above.

14:08.140 --> 14:13.600
Those are going to be swapped out for spaces when we run our code through deep herem and the air is

14:13.600 --> 14:15.180
still going to occur.

14:15.520 --> 14:20.470
Now that we have this in place we are in a pretty good spot to actually integrate rooms in the next

14:20.470 --> 14:21.950
video before we do though.

14:21.970 --> 14:27.280
Your challenge for this one is going to be to write some test cases for the brand new validation function

14:27.280 --> 14:32.870
we just created which means we're going to make a new test file called a validation test.

14:32.950 --> 14:33.530
Yes.

14:33.670 --> 14:38.060
And inside of here we're going to load in expect making a variable called expect.

14:38.080 --> 14:41.750
We could also make it a constant.

14:41.920 --> 14:47.110
We're going to set that equal to require and we're going to require the expect library just like we

14:47.110 --> 14:48.220
always do.

14:48.220 --> 14:52.160
Next up we're going to load in a real string which is going to be part of the challenge.

14:52.600 --> 14:58.640
Import is real sharing and we're going to add three test cases down below.

14:58.690 --> 15:04.820
They describe block should be something like is real string and the three test cases will be as follows.

15:05.760 --> 15:11.190
Should reject the 9 string values in this case.

15:11.220 --> 15:16.110
I want you to pass a number object or anything else into the real string function.

15:16.200 --> 15:18.200
You should get false back.

15:18.210 --> 15:23.260
Next up should reject strings with only spaces.

15:23.400 --> 15:29.660
If I have a string that's just a bunch of spaces that should not pass the is real string function validation.

15:29.760 --> 15:34.260
That's also going to fail trim is going to remove all of those spaces and the length will be zero.

15:34.350 --> 15:35.060
Last up.

15:35.160 --> 15:41.500
Should allow strings with non space characters.

15:41.600 --> 15:45.300
In this case you can pass in whatever you like some sort of valid value.

15:45.320 --> 15:47.070
You could have space space.

15:47.240 --> 15:49.620
L O T R for a lord of the Rings.

15:49.700 --> 15:52.940
The beginning spaces are going to get trimmed out so it's not important.

15:53.000 --> 15:54.060
You put out the letter.

15:54.080 --> 15:57.080
Any valid string is going to pass this one.

15:57.080 --> 16:02.470
Go ahead and set up those three test cases making sure the right boolean value comes back from.

16:02.480 --> 16:06.130
Is real string when you're done run NPM test from the terminal.

16:06.140 --> 16:13.020
Make sure all of your three tests passed and then you can go ahead and click play how you do hopefully

16:13.040 --> 16:15.990
you were able to test this function without too much trouble.

16:16.000 --> 16:20.560
The first thing we're going to do is inport it by making a variable we can make this a constant or a

16:20.560 --> 16:21.100
variable.

16:21.100 --> 16:22.460
I'm going to go with a constant.

16:22.870 --> 16:29.230
And we're going to use yes 60 structuring to grab it is real string and we're going to grab it off of

16:29.440 --> 16:35.980
the required call to our local file forward slash validation which is just alongside the current file

16:35.980 --> 16:38.760
validation test dot J S.

16:38.800 --> 16:43.180
Now we can add the things we have down below starting with our describe the block.

16:43.440 --> 16:48.250
We're going to describe the is real string function.

16:48.450 --> 16:54.150
Then we can add our arrow function and inside of here we can go ahead and provide our individual test

16:54.180 --> 16:55.350
cases.

16:55.350 --> 17:01.560
It and I'm going to copy it directly should reject non string values.

17:01.560 --> 17:06.200
This is going to be a synchronous test so there's no reason to add the Done argument inside of here.

17:06.210 --> 17:08.670
We're going to pass in a non string value.

17:08.700 --> 17:14.270
I'm going make a variable called response which will store the return result from is real string.

17:14.310 --> 17:17.000
We're going to call it passing in some sort of non-cheating value.

17:17.040 --> 17:17.880
Anything would work.

17:17.880 --> 17:20.120
I'm going to use a number 98.

17:20.310 --> 17:25.080
Now down below we can use expect to assert that the response variable equals false which should be the

17:25.080 --> 17:25.850
case.

17:25.880 --> 17:30.920
We're expecting response to be false.

17:30.970 --> 17:31.830
Perfect.

17:31.840 --> 17:37.780
Next up it should reject string with only spaces.

17:37.900 --> 17:42.300
I'm going to copy that text exactly pasting it inside of our IT name.

17:42.400 --> 17:44.710
Then we can go ahead and add our arrow function.

17:44.710 --> 17:49.810
And for this case all we're gonna do is create a variable called response passing in some sort of string

17:49.810 --> 17:51.500
with just spaces.

17:51.640 --> 17:52.710
We're still going to be calling.

17:52.710 --> 17:53.800
Is real strength.

17:53.950 --> 17:56.340
And right here we'll pass in a bunch of spaces.

17:56.470 --> 18:03.490
And now we're going to assert that responds is false expect response to be false which it should be

18:03.490 --> 18:06.440
because we do not have a valid string.

18:06.470 --> 18:13.670
Next up last test case it should allow strings with non space characters.

18:13.670 --> 18:17.550
I'm going to paste that in here and then we can go ahead and actually set up the test case.

18:17.570 --> 18:22.400
You could have provided a bunch of different values as the argument to is real string.

18:22.400 --> 18:24.760
We're still going to make that response variable.

18:24.770 --> 18:30.380
We're still going to call is real string but right here I'm going to choose to pass in that space space

18:31.100 --> 18:34.160
Andrew space space which is valid.

18:34.190 --> 18:39.980
The trim function is going to remove those spaces in the validation process and the Double-O we can

18:39.980 --> 18:46.910
expect that response is true to be true.

18:46.910 --> 18:47.430
Awesome.

18:47.510 --> 18:48.700
That's all you needed to do.

18:48.710 --> 18:53.600
We can go ahead and remove the comments since we have the actual code in place and the last thing to

18:53.600 --> 18:57.120
do is run the test case to make sure our code actually works.

18:57.230 --> 18:59.280
NPM test is going to get that done.

18:59.300 --> 19:04.220
This is going to run our test suite and right here we have our three test cases for is real string.

19:04.220 --> 19:06.460
All of them are passing which is fantastic.

19:06.470 --> 19:09.240
Now as I mentioned you could pretty much pass anything in here.

19:09.290 --> 19:13.970
The letter D would work as a valid room name or user name.

19:14.000 --> 19:19.760
If I rerun the test suite with as my string the test case still passes it doesn't really matter what

19:19.760 --> 19:20.650
you passed into here.

19:20.660 --> 19:24.180
As long as it had a real non-space character.

19:24.350 --> 19:27.620
Now that we have this in place we are done we're not going to make a commit just yet.

19:27.620 --> 19:32.120
We're kind of halfway through a feature we'll commit once we have a little more in place that's coming

19:32.120 --> 19:33.540
up next so stay tuned.

19:33.540 --> 19:34.870
I will see you then.
