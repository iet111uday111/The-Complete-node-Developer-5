WEBVTT

00:00.440 --> 00:05.090
It now that you have a basic express application up and running in this one you're going to configure

00:05.120 --> 00:09.470
your server to allow for incoming web socket connections.

00:09.470 --> 00:14.630
This means the server will be able to accept connections and will be setting up the client to make the

00:14.630 --> 00:19.550
connection then we'll have a persistent connection and we can send data back and forth whether it's

00:19.550 --> 00:25.730
data from the server to the client or data from the client to the server because that is the beauty

00:25.730 --> 00:26.930
of web sockets.

00:26.930 --> 00:29.720
You can send data in either direction.

00:29.750 --> 00:34.870
Now in order to set up the web sockets we're going to be using a library called socket I O.

00:35.060 --> 00:42.040
Just like Express makes it really easy to set up an HTP server socket I O makes it dead simple to set

00:42.040 --> 00:48.350
up a server that supports web sockets and to create a front end that communicates with the server socket

00:48.350 --> 00:51.810
Io has a back and front end library.

00:51.830 --> 00:57.590
We're going to be using both to set up Web sockets to get started over inside of the terminal.

00:57.590 --> 01:05.000
Let's go ahead and install the most recent version of socket IO using NPM I the module name is socket

01:05.190 --> 01:06.390
dot I O.

01:06.500 --> 01:07.920
And the most recent version.

01:07.940 --> 01:15.310
At one point four point eight we'll be using the same dev flag to update the package Chaisson file.

01:15.380 --> 01:20.210
Once this is in place we can go ahead and make a few changes to our server file.

01:20.210 --> 01:23.570
First up we're going to go ahead and load in the library.

01:23.750 --> 01:26.190
I'm going to make a constant called socket.

01:27.200 --> 01:34.130
And I'm going to set an equal to the require statement for the socket I O library with this in place.

01:34.190 --> 01:38.420
We now need to integrate socket o into our existing web server.

01:38.420 --> 01:41.220
Currently we use Express to make our web server.

01:41.290 --> 01:45.560
We create a new Express app we configure our middleware and we call app.

01:45.590 --> 01:53.360
Listen now behind the scenes Express is actually using a built in node module called HTP to create this

01:53.360 --> 01:54.130
server.

01:54.170 --> 02:01.070
We're going to need to use HTP ourselves configure express to work with HTP then and only then will

02:01.070 --> 02:04.220
we also be able to add a socket I O support.

02:04.250 --> 02:08.270
Now if that sounded like a mouthful I promise it's actually going to be pretty easy.

02:08.270 --> 02:11.480
We only have to change a few lines to get things to work.

02:11.690 --> 02:15.580
First up we're going to load in this module it's called HTP.

02:15.620 --> 02:18.210
So let's make a constant called HTP.

02:18.260 --> 02:21.540
It's a built in node module so there's no need to install it.

02:21.560 --> 02:26.730
We can simply require HTP just like this from here.

02:26.720 --> 02:33.480
We're going to go ahead and create a server using this HTP library just below our app variable.

02:33.560 --> 02:36.260
Let's make a variable called server.

02:36.350 --> 02:41.710
And what we're going to do is call HTP dot create server.

02:41.720 --> 02:46.160
Now you might not know it but you're actually already using the Create server method behind the scenes

02:46.460 --> 02:49.070
when you call app dot listen on your express app.

02:49.100 --> 02:57.080
It literally calls this exact same method passing in the app as the argument for create server create

02:57.080 --> 02:59.450
server takes a function.

02:59.450 --> 03:03.460
This function looks really similar to one of our express callbacks.

03:03.510 --> 03:06.530
It gets called with a request and a response.

03:06.530 --> 03:12.560
Now as I mentioned HTP is actually used behind the scenes for Express they're integrated so much so

03:12.560 --> 03:16.450
that you can actually provide the app as the argument.

03:16.490 --> 03:22.610
And we are done now before we integrate socket I'll just go ahead and wrap up this change.

03:22.610 --> 03:27.040
We're now using the HTP server as opposed to the Express server.

03:27.080 --> 03:32.670
So instead of calling app listen we're going to call server listen once again.

03:32.680 --> 03:35.860
There's no need to change the arguments passed in here.

03:35.870 --> 03:39.170
They're exactly the same they're built really closely to each other.

03:39.170 --> 03:45.110
So the server listen arguments are the same as the Express app lesson method arguments.

03:45.200 --> 03:48.890
Now that we have this in place we haven't actually changed any app functionality.

03:48.890 --> 03:53.060
Our server is still going to work on port three thousand but we're still not going to have access to

03:53.060 --> 03:53.640
socket.

03:53.750 --> 03:58.730
So over in the terminal I can prove this by clearing the terminal output and starting up our server

03:58.790 --> 04:03.660
using gnomon gnomon server forward slash server.

04:03.850 --> 04:09.650
J.S. and I'm just going to load localhost 3000 in the browser and see what I get back right here.

04:09.710 --> 04:10.410
What do we get.

04:10.460 --> 04:11.720
We get our HTL.

04:11.750 --> 04:14.370
Welcome to the chat app shows up.

04:14.390 --> 04:19.280
This means that our app is still working even though we're now using the HTP server.

04:19.310 --> 04:24.080
The next thing that we're going to do is configure the server to also use socket I O.

04:24.170 --> 04:28.060
That's the entire reason we made this change on the next line.

04:28.130 --> 04:32.350
We're going to make a variable called I O we'll talk about that in just a second.

04:32.390 --> 04:37.200
We're going to set it equal to a call to socket I O.

04:37.320 --> 04:41.810
And we're going to pass in the server that we want to use with our web sockets.

04:41.960 --> 04:42.170
Right.

04:42.180 --> 04:47.070
Here we have access to that server via the server variable so we'll pass that in as the first and only

04:47.070 --> 04:47.830
argument.

04:47.850 --> 04:54.660
Now when we get back is our web sockets server on here we can do anything we want in terms of emitting

04:54.810 --> 04:56.460
or listening to events.

04:56.520 --> 05:00.840
This is how we're going to communicate between the server and the client and we'll talk more about that

05:00.840 --> 05:02.230
in just a second.

05:02.310 --> 05:04.500
With this in place our server is ready to go.

05:04.500 --> 05:07.440
We are ready to accept new connections.

05:07.440 --> 05:12.850
The problem is we don't have any connections to accept when we load our Web page we're not doing anything.

05:12.870 --> 05:17.700
We're not actually connecting to the server and we are going to need to manually run some javascript

05:17.700 --> 05:21.040
code to initiate that connection process.

05:21.060 --> 05:26.720
Now when we integrated socket I O with our server we actually got access to a few cool things.

05:26.730 --> 05:32.580
First up we got access to a route that accepts incoming connections which means that we can now accept

05:32.640 --> 05:38.970
web socket connections and we got access to a javascript library that makes it really easy to work with

05:38.970 --> 05:41.460
socket I O on the client.

05:41.460 --> 05:49.920
This library is available at the following path forward slash socket I O board slash socket dot I O

05:50.040 --> 05:50.930
dot J.

05:50.940 --> 05:57.030
S If you load this javascript file on the browser you can see it's just a really long javascript library.

05:57.030 --> 06:02.730
This contains all of the code we're going to need on the client to make the connection and to transfer

06:02.730 --> 06:06.500
data whether it's server at a client or client to server.

06:06.690 --> 06:12.480
But we're going to do in order to make the connection from our HTL file is load this in I'm going to

06:12.480 --> 06:18.250
go back to localhost 3000 and now we can go ahead and move into Adam opening up index.

06:18.300 --> 06:24.090
H DML and down near the bottom of the body tag we're going to add a script tag loading in the file we

06:24.090 --> 06:25.650
just pulled up in the browser.

06:25.830 --> 06:28.480
First up will make the script tag itself.

06:29.250 --> 06:30.980
Opening and closing it.

06:31.290 --> 06:37.140
And in order to load in an external file We're going to use the source attribute providing the path.

06:37.230 --> 06:39.590
Now this path is relative to our server.

06:39.660 --> 06:44.780
It's going to be a forward slash socket I go forward slash socket Dom IO.

06:44.800 --> 06:50.490
J Yes exactly as we typed in the browser just moments ago by adding the script tag we're now loading

06:50.490 --> 06:56.160
in the library and on the browser we have access to all sorts of methods available because of the socket

06:56.160 --> 07:01.980
library one of those methods is going to let us initiate a connection request and that's exactly what

07:01.980 --> 07:03.780
we're going to do down below.

07:03.840 --> 07:08.610
Let's add a second script to tag this time instead of loading an external script.

07:08.640 --> 07:13.470
We're going to write some javascript right in line right in here we can add any javascript and this

07:13.470 --> 07:19.080
javascript is going to run right after the socket IO library loads a little bit later on we'll be breaking

07:19.080 --> 07:24.180
this out into its own file but for the moment we can simply have our javascript code right inside of

07:24.180 --> 07:31.470
our h tim l file right here but we're going to do is call I O I O is a method available to us because

07:31.470 --> 07:32.980
we loaded in this library.

07:33.060 --> 07:34.710
It's not native to the browser.

07:34.770 --> 07:40.590
And when we call it we're actually initiating the request we're making a request from the client to

07:40.590 --> 07:45.480
the server to open up a web socket and keep that connection open.

07:45.480 --> 07:48.030
Now what we get back from Iowa is really important.

07:48.030 --> 07:51.900
We're going to want to save that in a variable called socket just like this.

07:51.900 --> 07:57.600
This creates our connection and it stores the socket in a variable and this variable is critical to

07:57.600 --> 07:58.560
communicating.

07:58.600 --> 08:02.510
It's exactly what we need in order to listen for data from the server.

08:02.580 --> 08:09.030
And in order to send data to the server now that we have this in place let's go ahead and save our TNL

08:09.030 --> 08:09.650
file.

08:09.720 --> 08:14.030
We're going to move into the browser and we're going to open up the chrome developer tools.

08:14.250 --> 08:20.070
Now regardless of what browser you use whether it's IEEE Safari Firefox or chrome you're going to have

08:20.100 --> 08:25.290
access to a set of developer tools which makes it really easy to debug and see what's going on behind

08:25.290 --> 08:27.000
the scenes in your web page.

08:27.030 --> 08:30.620
We're going to be using the chrome developer tools here to do a little debugging.

08:30.720 --> 08:35.680
I'd highly recommend using Chrome for these videos just so you can follow along exactly.

08:35.850 --> 08:39.990
To open up the developer tools we go to settings more tools developer tools.

08:39.990 --> 08:44.720
You can also use the keyboard shortcut as shown here for your operating system.

08:44.820 --> 08:49.760
When you open developer tools you're going to be greeted with an overwhelming set of options you're

08:49.770 --> 08:54.930
most likely brought to the elements panel if you've never used the developer tools before the panel

08:54.930 --> 08:58.010
we're going to be using right now is the network panel.

08:58.170 --> 09:02.390
The network panel keeps track of all of the requests made by your web page.

09:02.400 --> 09:07.020
So if I make a request for a javascript file I'm going to see that in a nice list here.

09:07.110 --> 09:11.420
We're going to have to refresh the page in order to see the list of network requests.

09:11.490 --> 09:17.340
And right here we have six the network request at the very top is the first one that was made and the

09:17.340 --> 09:19.880
one at the very bottom is the last one that was made.

09:20.010 --> 09:25.590
The first one was for the page you see here it's for the H T and L file that loads Welcome to the chat

09:25.650 --> 09:26.270
app.

09:26.280 --> 09:29.990
The second one is for that javascript file that we saw in the browser.

09:30.000 --> 09:35.400
This gives us the library and gives us access to calling that I O method which starts the connection

09:35.400 --> 09:42.080
process the next four are all related to starting up and maintaining that connection with this in place.

09:42.120 --> 09:47.400
We now have that live connection between the client and the server and we can start communicating whatever

09:47.400 --> 09:48.810
we want to communicate.

09:48.810 --> 09:51.150
Now this communication could be anything at all.

09:51.180 --> 09:53.480
This comes in the form of an event.

09:53.580 --> 09:59.400
Events can be emitted from either the client or the server and either the client or the server can listen

09:59.430 --> 10:00.750
for events.

10:00.750 --> 10:04.460
Let's talk about an event that might happen in an e-mail app in an email app.

10:04.470 --> 10:09.840
For example the server might emit an event called new e-mail when a new e-mail comes in.

10:09.840 --> 10:14.830
The client is then going to listen for that event when it fires it'll get the new e-mail data and it

10:14.830 --> 10:17.750
will render the e-mail to the screen below the other ones.

10:17.820 --> 10:22.560
The same thing could happen the other way maybe the client wants to create a new e-mail and send it

10:22.560 --> 10:23.530
to someone else.

10:23.550 --> 10:29.490
It's going to ask for the e-mail address of the person and the message it's then going to emit an event

10:29.580 --> 10:32.220
on the client that the server is going to listen to.

10:32.220 --> 10:37.680
So this whole server client relationship is entirely ran via these events.

10:37.680 --> 10:42.620
Now we're going to be creating custom events for our specific application throughout this section.

10:42.690 --> 10:46.950
But for now we're going to look at a couple of different ones that are built in that let you keep track

10:46.950 --> 10:50.190
of new users and disconnecting users.

10:50.190 --> 10:55.920
This means we'll be able to do something like greet a user when they join our application in order to

10:55.920 --> 10:59.970
play around with this over inside of Adam inside of server Dom.

11:00.000 --> 11:03.710
J.S. we are going to call a method on I O.

11:03.880 --> 11:12.990
I o dot on I O dot on lets you register an event Lessner we can listen for a specific event and do something

11:13.050 --> 11:15.010
when that event happens.

11:15.090 --> 11:20.370
One built in event that we're going to use the most popular one is called connection.

11:20.370 --> 11:26.190
This lets you listen for a new connection meaning that a client connected to the server and it lets

11:26.190 --> 11:31.780
you do something when that connection comes in in order to do something you provide a callback function

11:31.810 --> 11:37.190
as the second argument and this callback function is going to get called with a socket.

11:37.270 --> 11:43.010
The socket argument is really similar to the socket argument we have access to over inside an index.

11:43.070 --> 11:49.450
HTL this represents the individual socket as opposed to all of the users connected to the server.

11:49.780 --> 11:52.170
Now with this in place we can do whatever we like.

11:52.180 --> 11:56.710
For example I could use council that like to print a little message.

11:56.800 --> 12:04.070
New user connected every time a user connects to our app we're going to print a message to the con.

12:04.490 --> 12:09.140
I'm going to go ahead and save the server japes file move into the terminal and you're going to see

12:09.140 --> 12:15.680
that the message actually already exists to explain why we need to understand one thing about web sockets

12:16.010 --> 12:16.660
web sockets.

12:16.670 --> 12:22.670
As I mentioned they are a persistent technology meaning that the client and server they both keep the

12:22.670 --> 12:28.190
communication channel open for as long as both of them want to if the server shuts down the client doesn't

12:28.190 --> 12:29.120
really have a choice.

12:29.180 --> 12:32.370
And the same thing for the client and server relationship.

12:32.510 --> 12:37.270
And I close a browser tab the server cannot force me to keep the connection open.

12:37.310 --> 12:43.130
Now when a connection drops the client it's still going to try to reconnect when we restart the server

12:43.170 --> 12:44.220
using gnomon.

12:44.240 --> 12:49.490
There's about a quarter of a second of time where the servers down and the client notices that it says

12:49.490 --> 12:53.560
well 00 server went down let's try to reconnect and eventually it reconnects.

12:53.570 --> 12:56.690
And that's why we're seeing the message right here.

12:56.690 --> 12:58.480
New user connected.

12:58.640 --> 13:02.390
I'm going to go ahead and shut down the server and over inside of the client.

13:02.450 --> 13:05.420
You're going to see that network requests are being made right here.

13:05.420 --> 13:11.280
We're trying to reconnect to the server and you can see they're failing because the server is not up.

13:11.490 --> 13:16.920
Now if we go back into the terminal and we restart the server over inside of the client We're going

13:16.920 --> 13:18.420
to try to reconnect again.

13:18.510 --> 13:24.000
We're going to get a successive result from the server and boom we are back just like that.

13:24.090 --> 13:29.130
Now when we reconnect you can see that we get the message over here and that's why we saw it when we

13:29.130 --> 13:33.060
first added it to the server DHHS file.

13:33.060 --> 13:36.600
Now the connection of that also exists over in the client.

13:36.600 --> 13:41.010
That means on the client we can do something when we successfully connect to the server.

13:41.010 --> 13:42.350
It might not happen right away.

13:42.420 --> 13:45.030
It might take a little time over inside of Adam.

13:45.120 --> 13:49.920
We can add this event inside of index HTL right below our call to.

13:49.980 --> 13:56.790
Oh right here we're going to call Sacket dot on we want to listen for an event and this event is a little

13:56.790 --> 13:58.280
different than the one we have here.

13:58.410 --> 13:59.900
It's not on connection.

13:59.910 --> 14:05.940
It's on CONNECT THE on method here is exactly the same as the one we use in server.

14:06.000 --> 14:09.940
J.S. the first argument is the event name and the second argument.

14:09.960 --> 14:12.390
That is the callback function.

14:12.450 --> 14:18.460
In this case we don't get access to a socket argument since we already have it right here called socket.

14:18.630 --> 14:24.060
In this case all I'm going to do is use console dialog to print a little message to the console connected

14:24.810 --> 14:26.890
to server.

14:26.910 --> 14:27.610
Awesome.

14:28.020 --> 14:33.350
Now that we have this in place we can go into the browser and go to a new tab in the developer tools.

14:33.390 --> 14:38.870
We're going to load the console tab the console tab is kind of like the terminal inside of node.

14:39.030 --> 14:44.250
If we use cancel that log in our client side javascript code those messages are going to show up here.

14:44.250 --> 14:49.410
As you can see we also have some errors these errors occurred when our server was down as I was showing

14:49.410 --> 14:50.570
you how it reconnects.

14:50.760 --> 14:57.270
But if we refreshed the page as you're going to see connected to server shows up right here as soon

14:57.270 --> 15:03.000
as the connection happens the client and the server they both had that event fired the client prints

15:03.000 --> 15:10.410
connected to server and the server prints new user connected with this in place we've now used the event

15:10.470 --> 15:11.600
system in socket.

15:11.650 --> 15:17.110
So we haven't set our own custom events but we have taken advantage of some built in ones.

15:17.130 --> 15:22.200
The last thing we're going to talk about in this video is the disconnect event which lets you do something

15:22.200 --> 15:27.000
on both the server and the client when the connection drops.

15:27.200 --> 15:31.900
We're going to add an event listener on the client together and your challenge will be to do the same

15:31.900 --> 15:34.290
thing on the server on the client.

15:34.290 --> 15:39.520
Down below our connect event we can call socket on again to listen to a new event.

15:39.610 --> 15:43.460
Once again the name of the event here is the name of a built in event.

15:43.570 --> 15:45.950
So it's only going to work if you type it correctly.

15:45.970 --> 15:53.130
This one is called Disconnect the disconnect event is going to fire when ever the connection drops.

15:53.200 --> 15:58.300
If the server goes down the client is going to be able to do something for now that something is just

15:58.300 --> 16:03.180
going to be Lague a message console log unable to connect.

16:03.310 --> 16:06.870
Actually on cable is the incorrect terminology disconnected.

16:07.920 --> 16:09.480
From server.

16:09.540 --> 16:12.460
Much clearer now that we had this message in place.

16:12.570 --> 16:14.520
We can actually save our index.

16:14.650 --> 16:20.560
TMF I'll go over to the browser and we can give it a refreshed to load in our new javascript file.

16:20.580 --> 16:25.320
I'm going to go ahead and make my browser screen just a little bit smaller so he can see it in the background

16:25.350 --> 16:26.690
of the terminal.

16:26.730 --> 16:28.010
I'm going to go to the terminal.

16:28.080 --> 16:31.350
I'm going to shut down the connection by shutting down the server.

16:31.350 --> 16:34.050
And over inside of the browser what do we get.

16:34.080 --> 16:37.490
We get disconnected from server printing to the screen.

16:37.620 --> 16:42.900
If I restart my server over inside of the terminal you can see we've automatically connected and connected

16:42.900 --> 16:45.020
to server prints to the screen.

16:45.180 --> 16:48.470
Now the exact same event exists on the server.

16:48.480 --> 16:54.360
We can listen for a disconnecting client and we can do something when they leave in order to register

16:54.360 --> 16:55.060
this event.

16:55.110 --> 17:02.370
You are going to go into server dot J.S. and inside of our callback you're going to call socket dot

17:02.490 --> 17:05.050
on just like we do right here.

17:05.100 --> 17:07.120
It's the exact same signature.

17:07.140 --> 17:12.840
The first argument is the event name it's the disconnect event and the callback function should do something

17:12.840 --> 17:16.210
simple like print client disconnected.

17:16.230 --> 17:21.810
Once you have that in place what I want you to do is open up the browser and open up the terminal then

17:21.870 --> 17:27.670
close the browser tab and you should see the message print in the server whatever message you happen

17:27.710 --> 17:33.760
to type here try to open up another browser tab close that one and make sure you get the same message.

17:33.810 --> 17:39.600
This message should print every time one of your browser tabs closes assuming that browser tab had an

17:39.600 --> 17:43.620
open connection socket dot on is your challenge.

17:43.620 --> 17:44.870
Take a moment to knock this out.

17:44.880 --> 17:45.330
Test it.

17:45.330 --> 17:46.760
And when you're done click play

17:50.630 --> 17:56.260
right all you needed to do was copy the exact same signature as we used here socket.

17:56.360 --> 18:00.150
On takes two arguments the first one is the name.

18:00.440 --> 18:03.270
Disconnect is the event name we're trying to listen to.

18:03.380 --> 18:07.430
And the second argument is the function to run when the event fires.

18:07.430 --> 18:11.510
This means the function to run when a socket is disconnected.

18:11.540 --> 18:18.870
In this case all we're going to do is use console dialog to print user was disconnected just like this

18:19.130 --> 18:23.230
and we're going to save the file which is automatically going to restart our application.

18:23.450 --> 18:28.030
I'm going to switch to the terminal and then to the browser so I can see the terminal in the background.

18:28.110 --> 18:29.470
I'm going to open up a new tab.

18:29.480 --> 18:33.110
So when I close this one the chrome browser doesn't close completely.

18:33.140 --> 18:38.540
I'm going to close the tab with open connection and right here inside of the terminal we got user was

18:38.600 --> 18:39.750
disconnected.

18:39.770 --> 18:46.320
If I open up a new tab and go to a local host 3000 live right as I do it new user connected Prince.

18:46.400 --> 18:52.340
And as soon as I close it bam on the server user it was disconnected prints to the screen.

18:52.340 --> 18:58.190
Hopefully you're starting to see why web sockets are so awesome that instant two way communication makes

18:58.220 --> 19:02.650
any sort of realtime application effortless to build in the next video.

19:02.720 --> 19:07.250
We're going to get into the very very interesting stuff you're going to learn how to emit and listen

19:07.250 --> 19:08.740
to custom events.

19:08.750 --> 19:14.020
This means you can send any data you like from the server to the client and vice versa.

19:14.030 --> 19:15.580
Let's wrap this one up with a comment.

19:15.590 --> 19:21.060
I'm going to shut down our server run and get status and I can see we only have modified files.

19:21.080 --> 19:28.740
So get commit with the M flag is going to get the job done right here we can add our message and connect

19:29.100 --> 19:32.600
and disconnect event handlers.

19:32.760 --> 19:33.690
Awesome.

19:33.690 --> 19:36.430
I'm going to make the commit and push it up to get hub.

19:36.420 --> 19:38.790
There's no need to deploy to Heroku just yet.

19:38.790 --> 19:40.520
With that in place we are done.

19:40.540 --> 19:42.070
I'll see you in the next one.
