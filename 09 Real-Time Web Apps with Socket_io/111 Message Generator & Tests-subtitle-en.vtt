WEBVTT

00:01.290 --> 00:06.810
In this video you are going to break out some functionality currently in server G-S into a separate

00:06.810 --> 00:07.450
file.

00:07.500 --> 00:12.540
And we're also going to set up our test suite so we can verify that those utility functions are working

00:12.780 --> 00:13.810
as expected.

00:13.980 --> 00:19.320
For the moment our goal is going to be to create a function that helps us generate this object instead

00:19.320 --> 00:21.900
of having to define the object every single time.

00:22.020 --> 00:27.710
We'll simply pass in two arguments to a function the name and the text it'll generate the object.

00:27.810 --> 00:30.710
So we will have to do that work down below.

00:30.900 --> 00:36.180
Now to get this done we are going to make a separate file that we load into server japes with a method

00:36.180 --> 00:40.650
we call instead of defining the object inside of the server folder.

00:40.740 --> 00:47.670
We're going to make a new directory called utils and inside of utils we're going to make a file called

00:48.000 --> 00:49.050
Message dot.

00:49.080 --> 00:54.870
J.S. this is going to store our utility functions related to messaging and in our case we're going to

00:54.860 --> 00:57.790
make a new one called generate message.

00:58.110 --> 01:03.230
Let's make a variable called generate message.

01:03.250 --> 01:08.170
This is going to be a function and it's going to take those two arguments I talked about earlier from

01:08.710 --> 01:15.760
end text it's then going to return an object just like the objects we pass in as the second argument

01:15.820 --> 01:17.150
to emit.

01:17.170 --> 01:21.010
Now we'll do this together and your challenge will be the testing side of things.

01:21.040 --> 01:28.270
For now all we need to do is return an object specifying from as the From argument up above text as

01:28.270 --> 01:29.910
the text argument up above.

01:30.040 --> 01:31.380
And to create it at.

01:31.460 --> 01:38.050
And that is going to get generated by calling a new date and calling it's got time method.

01:38.320 --> 01:43.690
With this in place our utility function is now done all we need to do is export it down below.

01:43.690 --> 01:46.180
Module exports.

01:46.300 --> 01:52.000
We're going to set that equal to an object that has a generate message property equal to the generate

01:52.000 --> 01:54.150
message variable defined above.

01:54.190 --> 01:56.720
We'll eventually be able to integrate this into server Dom.

01:56.750 --> 02:02.100
J.S. But before we do let's go ahead and write some test cases to make sure it works as expected.

02:02.140 --> 02:07.510
This means we are going to need to install Moka And we're also going to need to install the expect assertion

02:07.510 --> 02:14.630
library then we'll set up our package that Jason scripts then we can write the test case first up inside

02:14.620 --> 02:15.490
of the terminal.

02:15.490 --> 02:21.550
We are going to install using NPM install two modules we need expect which is our assertion library.

02:21.700 --> 02:25.480
At one point twenty point two.

02:25.750 --> 02:32.620
And we're also going to install Moka to run our test suite at Version 3 point zero point two and we're

02:32.620 --> 02:37.750
going to use the save death flag to add these as development dependencies.

02:37.750 --> 02:42.520
Let's go ahead and run this command and once it's done we can move into packaged up Jason and set up

02:42.520 --> 02:44.120
those test scripts.

02:44.130 --> 02:49.620
They're going to be identical to the ones we used in the last project inside a package.

02:49.630 --> 02:54.820
Jason we now have two dev dependencies and inside of scripts we can get started by removing the old

02:54.850 --> 02:55.750
test script.

02:55.870 --> 02:59.170
And we're going to add those two scripts test and test.

02:59.290 --> 03:00.080
Watch.

03:00.340 --> 03:04.080
Let's go ahead and fill out the basics first test.

03:04.130 --> 03:10.540
Set that equal to an empty string for the moment and test high and watch the test watch script as we

03:10.540 --> 03:21.940
know simply calls gnomon calling the NPM test script gnomon hyphen hyphen the X is C then inside single

03:21.940 --> 03:26.640
quotes NPM test that is going to get the job done.

03:26.650 --> 03:31.270
Now when we run gnomon here we're actually running the globally installed gnomon.

03:31.390 --> 03:34.970
We can also install it locally to fix that to get that done.

03:35.010 --> 03:39.100
We're going to do is run NPM install node mohn.

03:39.280 --> 03:44.770
We're going to add the most recent version which is version one point ten point two and we are going

03:44.770 --> 03:47.900
to use the save dead flag to install it.

03:47.950 --> 03:54.550
Now when we install node like this our application no longer relies on that global node Mohn installation.

03:54.550 --> 03:58.330
So if someone else grabs this from get hub they're going to be able to get started without needing to

03:58.330 --> 04:00.440
install anything globally.

04:00.640 --> 04:06.190
Next up is that test script the test script first has to set up those environment variables that were

04:06.190 --> 04:07.390
going to be configuring.

04:07.390 --> 04:08.530
We'll do that later.

04:08.560 --> 04:16.400
For now we're going to do is run Moka passing in the pattern for the files we want to test the files

04:16.400 --> 04:18.620
we want to test are in that server directory.

04:18.740 --> 04:20.460
They could be in any subdirectory.

04:20.480 --> 04:27.390
So we'll use star star and the files regardless of their name are going to end in test dot J.

04:27.420 --> 04:29.930
S And with this in place we are done.

04:30.020 --> 04:33.020
We can now run our test suite over in the terminal.

04:33.020 --> 04:38.370
If I run NPM test all we're going to see is that we have 0 tests in place.

04:38.430 --> 04:40.500
Here we have the server test file.

04:40.500 --> 04:43.870
Globbing pattern it could not resolve any files.

04:43.950 --> 04:46.620
We can fix this issue by simply adding a test file.

04:46.620 --> 04:52.110
I'm going to add a test file for the message utility message test.

04:52.150 --> 04:53.060
J.S..

04:53.070 --> 04:56.760
Now we can go ahead and rerun the NPM test command this time around.

04:56.760 --> 05:02.610
It does indeed find a file and we see we have zero passing tests which is a great starting point inside

05:02.610 --> 05:03.270
of here.

05:03.270 --> 05:06.950
We're going to need to add a test for the message function.

05:06.960 --> 05:08.450
We just defined.

05:08.610 --> 05:13.500
Now this test is going to verify that the object we get back is what we would expect given the parameters

05:13.530 --> 05:18.360
we passed in we'll set up the basic structure of the test file together and you're going to write the

05:18.360 --> 05:20.140
individual test case.

05:20.220 --> 05:25.970
First up we need to load and expect no way to get around that var expect equals require expect.

05:26.040 --> 05:32.240
This is going to let us make our assertions about the return value from our generate message function.

05:32.460 --> 05:39.250
The next thing we're going to do is add a describe block here we're going to add a describe block for

05:39.250 --> 05:46.450
the function generate message and inside of the callback function we'll have all of the test cases for

05:46.540 --> 05:47.900
that function.

05:47.980 --> 05:52.720
And before we can actually create a test case and fill it out we do need to load in the module or testing.

05:52.790 --> 05:56.130
I'm going to make a variable and using yes 60 structuring.

05:56.140 --> 05:56.980
We're going to pull off.

05:56.980 --> 06:04.210
Generate message generate message and then we can go ahead and require it using require specifying the

06:04.210 --> 06:07.730
local path dot forward slash message.

06:07.840 --> 06:11.200
It's in the same directory as the test file where we currently are.

06:11.200 --> 06:14.880
So there's no reason to do any directory moving with this in place.

06:14.890 --> 06:17.680
We can now add to the individual test case.

06:17.680 --> 06:28.760
It should generate the correct message object and your job is going to be to write the test case this

06:28.760 --> 06:30.250
is going to be a synchronous test.

06:30.260 --> 06:32.710
So there is no need to provide done.

06:32.810 --> 06:38.830
All you need to do is call generate message with two values a from value and a text value.

06:38.930 --> 06:45.140
You're going to get the response back store response in variable then you're going to make some assertions

06:45.140 --> 06:46.490
about the response.

06:46.490 --> 06:48.830
First up assert that firm is correct.

06:48.950 --> 06:57.200
Assert from matches the value you passed in you're also going to assert that the text matches up.

06:57.220 --> 07:04.100
And lastly you're going to assert that the created value is a number.

07:04.140 --> 07:09.450
It doesn't matter what number it is you're going to use the to be a method to check the type assert

07:09.440 --> 07:15.990
create it at is number once you have all of that done you should be able to rerun the test script over

07:15.990 --> 07:20.350
inside of the terminal and you should say you have one test and it is indeed passing.

07:20.400 --> 07:24.540
Now but there's a little open ended because we have tested quite a few things in the past.

07:24.540 --> 07:30.900
Feel free to refer to any other videos or any other code you wrote for this course to get this challenge

07:31.170 --> 07:32.140
done.

07:32.160 --> 07:37.480
So once again call the function grab its return value and assert things about that value.

07:37.500 --> 07:43.660
Pause the video and when you're done click play it all right to get this done.

07:43.710 --> 07:46.330
The first thing I'm going to do is define some variables.

07:46.440 --> 07:49.350
It's fine if you win about things a different way.

07:49.350 --> 07:54.840
As long as you got the assertions working correctly to get started I'm going to make a from a variable

07:54.840 --> 07:56.480
to store the from value.

07:56.520 --> 08:04.710
I'll go ahead and use gen I'm also going to make a text variable to store the text value some message.

08:04.710 --> 08:09.720
Now what I want to do is make my final variable which is going to store the response the message that

08:09.720 --> 08:14.660
comes back from the generate message function which is exactly what I'm going to call right here.

08:14.760 --> 08:19.560
I'm going to call generate message passing in the two necessary arguments.

08:19.560 --> 08:27.570
The From argument end of the text argument I have that right here from comma text.

08:27.690 --> 08:33.260
Next up and the final thing we need to do is make assertions about this object that comes back.

08:33.490 --> 08:44.160
I am going to expect that message dot created at is a number using to be a.

08:44.220 --> 08:46.830
And passing in the type number.

08:46.830 --> 08:51.360
This was the first assertion you needed to make to verify the property is correct.

08:51.360 --> 08:56.760
Next up we're going to expect that message has certain properties inside of it.

08:56.760 --> 09:01.440
We're going to do this using the to include assertion though you could have created two separate statements

09:01.620 --> 09:06.180
one for message dot from and a separate one for message dot text.

09:06.180 --> 09:07.980
All of those are valid solutions.

09:07.980 --> 09:15.390
I'm just going to happen to use to include and we're going to specify some things that message should

09:15.390 --> 09:20.790
include first up it should have a from property equal to the from a variable up above.

09:20.790 --> 09:23.300
We can go ahead and use yes six to define that.

09:23.370 --> 09:27.360
And the same thing is going to happen for text text should equal text.

09:27.420 --> 09:30.060
And we're going to use yes 6 to set that up.

09:30.180 --> 09:35.440
We can even simplify this further from comma text.

09:35.550 --> 09:36.330
Excellent.

09:36.330 --> 09:41.210
Would this in place are test cases now done and we can go ahead and remove these commented out lines.

09:41.340 --> 09:48.090
And the final thing you needed to do was run the test suite from the terminal by running NPM test.

09:48.150 --> 09:53.070
When we do it what do we get we get our one test under generate message should generate correct message

09:53.100 --> 09:56.940
object and it is indeed passing which is fantastic.

09:57.000 --> 10:00.320
Now that we have some tests verifying our function works as expected.

10:00.330 --> 10:05.100
Let's go ahead and integrate it into our application by moving into server J S and replacing all of

10:05.100 --> 10:11.090
the objects we pass to the emet function with calls to our new function.

10:11.160 --> 10:15.460
The first step in this process is going to be to inport the function we just created.

10:15.480 --> 10:19.350
I'm going to do that up above by creating a constant will you.

10:19.370 --> 10:25.660
Yes 60 structuring to grab a generate message and we're going to grab it off of a call to require now

10:25.660 --> 10:28.370
or requiring a local file in a different directory.

10:28.470 --> 10:29.390
We're going to start with.

10:29.400 --> 10:30.470
Forward slash.

10:30.540 --> 10:34.810
We're going to go into the utility directory since we're currently in the server directory.

10:35.100 --> 10:39.230
Then we can grab the file message by specifying it right here.

10:39.240 --> 10:45.660
Now we have access to generate message and instead of creating these objects we can call generate message

10:45.900 --> 10:46.520
right here.

10:46.620 --> 10:53.700
We're going to replace Welcome to the chat app and the admin variables with arguments generate a message

10:53.850 --> 11:03.700
from admin and the tax is going to be a welcome to the chat app we have the exact same functionality

11:03.730 --> 11:08.530
but now we're using a function to generate that object for us which is going to make scaling that out

11:08.530 --> 11:09.600
a lot easier.

11:09.610 --> 11:14.350
It's also going to make updating what is inside of a message much easier as well.

11:14.350 --> 11:18.320
Next up we can change the one we have down below for new user joined.

11:18.370 --> 11:21.200
We're going to go ahead and replace this with a call to generate messages.

11:21.200 --> 11:24.720
Well once again this one's from the admin.

11:24.720 --> 11:27.450
So the first argument will be the string admin.

11:27.450 --> 11:31.820
The second argument is the text new user joined.

11:31.950 --> 11:32.830
Excellent.

11:32.850 --> 11:39.000
This one is done too and the final one is the one that actually gets sent to the user from a user which

11:39.000 --> 11:41.720
means we have message data from a message text.

11:41.790 --> 11:43.920
Those are going to be our arguments.

11:44.130 --> 11:48.680
We're going to call generate message with those two message doctor from.

11:48.810 --> 11:50.220
And as the second argument.

11:50.220 --> 11:52.110
Message dot text.

11:52.200 --> 11:54.270
And with this in place we are done.

11:54.300 --> 11:59.260
The last thing left to do for this video is test that this is working as expected.

11:59.430 --> 12:04.610
I'm going to start up the server using gnomon without a space between node and my own server forwards

12:04.740 --> 12:05.980
Siavash server.

12:06.060 --> 12:12.000
J.S. once the server is up we can go ahead and test things out by opening up a couple of tabs with the

12:12.000 --> 12:14.980
developer tools open for the first tab.

12:15.010 --> 12:20.350
Going to visit local host 3000 inside of the council we should see our new message printing.

12:20.400 --> 12:25.440
The object looks the same even though it's now generated by the function and we can test that everything

12:25.440 --> 12:31.130
else is working as expected to by opening up a second tab and opening up its developer tools.

12:31.290 --> 12:35.000
And this time around the first tab should see a new message.

12:35.040 --> 12:36.580
Here we have a new user joined.

12:36.600 --> 12:37.980
That's still working.

12:37.980 --> 12:43.420
And if we emit a custom message from this second tab it should show up in the first.

12:43.590 --> 12:49.420
I'm going to use the up arrow key to run one of our previous create message event emitters.

12:49.530 --> 12:54.210
I'm going to fire off the function and if I go to the first tab We do indeed get the message which is

12:54.240 --> 12:54.900
fantastic.

12:54.900 --> 13:00.230
This should work print's in the first tab and also Prince in the second sense we're calling IO data

13:00.660 --> 13:03.530
as opposed to the broadcast method.

13:03.660 --> 13:08.330
Now that everything is working we are done we can make a commit and wrap this one up.

13:08.430 --> 13:10.630
I'm going to call get status from the terminal.

13:10.710 --> 13:16.990
Here we have new files as well as modified ones which means we're going to want to call get ad dot.

13:17.010 --> 13:28.190
Next up we can call get commit with a message flag create generate message utility.

13:28.330 --> 13:29.050
Excellent.

13:29.200 --> 13:33.230
I'm going to push this up to get hub and that is it for this one.

13:33.320 --> 13:37.870
Then the next one we're going to take a look at socket I O acknowledgements which are fantastic It's

13:37.870 --> 13:39.510
coming up next so stay tuned.

13:39.520 --> 13:40.950
I'll see you then.
