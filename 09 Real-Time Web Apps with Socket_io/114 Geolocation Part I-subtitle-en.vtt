WEBVTT

00:00.430 --> 00:01.830
In this video you're going to start.

00:01.830 --> 00:04.500
Part 1 of a two part series on geo location.

00:04.500 --> 00:10.110
Instead of just sending text back and forth we're also going to set it up so I can beam my actual coordinates

00:10.110 --> 00:13.760
my long tuning latitude to everyone else connected to the chat app.

00:13.860 --> 00:17.570
Then we can render a link and that link could go wherever we like in our case.

00:17.610 --> 00:22.890
We're going to set it up to pull up a Google Maps page where the actual location of the user who set

00:22.890 --> 00:25.120
their location is marked.

00:25.170 --> 00:30.150
Now to actually fetch a user's location or we're going to use the geo location API which is available

00:30.150 --> 00:34.780
in your client side javascript and it's actually a pretty well supported API.

00:34.830 --> 00:38.810
It's available on all modern browsers whether that's mobile or desktop.

00:38.910 --> 00:45.780
And the documentation can be found by googling geo location API and looking for the NTN documentation

00:45.780 --> 00:49.680
page the MDA docs or the Mozilla Developer Network.

00:49.710 --> 00:55.630
They are my favorite docs for clients that technologies things like your web API is your CSSA and your

00:55.960 --> 00:57.670
HMO guidelines.

00:57.720 --> 01:00.450
And as I mentioned this is a well-supported feature.

01:00.540 --> 01:06.390
You can pretty much use it everywhere except for older versions of Internet Explorer and the Opera Mini

01:06.390 --> 01:10.580
browser but all your major desktop and mobile browsers are going to support this.

01:10.650 --> 01:15.600
And if the browser is old we will set up a little message to let them know their browser does not support

01:15.810 --> 01:17.160
geo location.

01:17.160 --> 01:21.510
If you ever want to learn more about geolocation or explore features that we do not cover in the next

01:21.510 --> 01:26.850
two videos you can refer to this page though we will be using most of the features geo location has

01:26.850 --> 01:28.790
to offer to get started.

01:28.800 --> 01:31.690
What we're going to do is add a new button to our application.

01:31.710 --> 01:36.840
It's going to sit alongside of sand and it's going to say something like send location when the user

01:36.840 --> 01:38.860
clicks that send location button.

01:38.920 --> 01:44.310
We're going to use the geolocation API and usually this is going to require the user to confirm they

01:44.310 --> 01:49.400
want to share their location with this tab in the browser that pop up box is going to happen.

01:49.410 --> 01:53.370
It's going to be triggered by the browser there's no way around that you're going to need to make sure

01:53.370 --> 01:56.260
the user actually wants to share their location.

01:56.280 --> 02:00.180
Once you have the coordinates you're going to an event that's going to go to the server the server is

02:00.180 --> 02:02.520
going to send it to all the other connected users.

02:02.610 --> 02:05.610
And we're going to be able to render that information in a nice link.

02:05.610 --> 02:09.760
Now we're going to get started in this video and we'll wrap up the feature in the next one.

02:09.900 --> 02:10.720
To kick things off.

02:10.800 --> 02:11.840
We're going to add that button.

02:11.880 --> 02:18.070
This is going to be the button that starts the entire process over inside of atom inside of index.

02:18.240 --> 02:18.910
AML.

02:19.020 --> 02:21.900
We're going to add a button just below our form tag.

02:21.900 --> 02:26.370
It's going to be outside of our existing form right here.

02:26.390 --> 02:36.440
We're going to add the button tag and we're going to go ahead and give this an I.D. of send location.

02:36.440 --> 02:43.100
Now as for the visible button text we can go ahead and use send location as our string saved the file.

02:43.100 --> 02:48.020
And if we go ahead and refresh our app in the browser we should now see we have our second location

02:48.020 --> 02:50.480
button showing up just below.

02:50.480 --> 02:53.020
We're going to fix all this later when we add the default styles.

02:53.030 --> 02:55.320
But for now this does get the job done.

02:55.340 --> 02:57.980
Now clicking this button currently is not going to do anything.

02:58.010 --> 03:02.570
It's not tied to a form so it's not going to do any weird form submissions or page reloads.

03:02.570 --> 03:08.470
All we need to do is add a click listener to this button and we'll be able to run whatever code we like.

03:08.470 --> 03:11.490
In our case we're going to run that geolocation code.

03:11.510 --> 03:15.740
This is going to happen over inside of atom inside of index dot J.S..

03:15.860 --> 03:18.960
We're going to add some code down near the bottom.

03:18.980 --> 03:24.280
Now the first thing I want to do is create a variable and I'm going to call this variable location button.

03:25.230 --> 03:27.220
And this is going to store our selector.

03:27.220 --> 03:31.780
This is the J query selector that targets the button we just created because we're going to need to

03:31.780 --> 03:35.140
reference it multiple times and storing it in a variable.

03:35.140 --> 03:40.300
Saves the need to make those calls again right here we're going to call a query like we've done for

03:40.330 --> 03:45.670
other selectors passing in one argument a string and we're selecting something by ID which means we

03:45.670 --> 03:47.190
got to start with that pound sign.

03:47.290 --> 03:55.380
And the actual ID is send hyphen location send hyphen location right here.

03:55.380 --> 03:59.640
Now that we have this in place we can go ahead and do whatever we like in our case what we're going

03:59.640 --> 04:01.610
to be doing is adding a click event.

04:01.740 --> 04:05.930
We want to do something when someone clicks that button to get that done.

04:05.970 --> 04:12.900
We're going to go to location button dot on now this is identical to doing the following.

04:13.180 --> 04:19.600
Jay query selecting the ID central location both of these are going to do the same thing.

04:19.620 --> 04:23.640
The benefit of the first solution is that we have a reusable variable which we are going to reference

04:23.640 --> 04:27.660
later on making to Jay query calls to the same selector.

04:27.660 --> 04:33.210
It wastes time because it is going to require J query to manipulate the DOM fetching that information

04:33.210 --> 04:34.270
and that's expensive.

04:35.500 --> 04:39.780
Location button on is going to be our event listener.

04:39.910 --> 04:44.380
We're listening for the Click event inside of quotes for the first argument and the second argument

04:44.410 --> 04:47.560
as always is going to be our function.

04:47.560 --> 04:51.080
This function is going to get called when someone clicks the button.

04:51.370 --> 04:56.220
For now all we're going to do is check if the user has access to that geolocation API.

04:56.350 --> 04:59.230
If they don't we want to go ahead and print a message.

04:59.230 --> 05:01.050
We're going to create an if statement.

05:01.360 --> 05:09.370
The geolocation API exists on Navigator dot geolocation and we want to run some code if it doesn't exist.

05:09.370 --> 05:14.410
So we're going to flip it if there is no geo location object on a navigator.

05:14.410 --> 05:19.120
We want to do something we're going to use return to prevent the rest of the function from executing

05:19.120 --> 05:24.160
and we're going to call the alert function available in all browsers that pops up one of those default

05:24.190 --> 05:26.600
alert boxes that makes you click OK.

05:26.710 --> 05:31.240
We're going to use this as opposed to a fancy or motile if you are using something like bootstrap or

05:31.240 --> 05:32.080
foundation.

05:32.080 --> 05:34.240
You can implement one of their built in tools.

05:34.240 --> 05:37.720
For now though we're going to use alert which takes just one argument a string.

05:37.720 --> 05:45.300
Your message geolocation not supported by your browser.

05:45.310 --> 05:46.000
Awesome.

05:46.010 --> 05:50.530
And now users who don't have support for this are gonna see a little message as opposed to wondering

05:50.530 --> 05:54.930
whether or not anything actually happened to actually fetcher users position.

05:55.000 --> 05:59.880
We're going to use a function available on geolocation to access it.

05:59.890 --> 06:07.390
It's navigator dot geo location dot get current position.

06:07.540 --> 06:10.770
You get current position is a function that starts the process.

06:10.810 --> 06:14.090
It's going to actively get the coordinates for the user.

06:14.170 --> 06:17.260
In this case it's going to find the coordinates based off of the browser.

06:17.350 --> 06:19.460
And this takes two functions.

06:19.510 --> 06:21.510
The first one is your success function.

06:21.640 --> 06:23.700
Right here we can at our first callback.

06:23.740 --> 06:26.750
This is going to get called within the location information.

06:26.860 --> 06:29.770
We're going to name this argument position.

06:29.900 --> 06:35.120
The second argument to get current position is going to be our air handler if something goes wrong.

06:36.030 --> 06:41.420
We're going to create a function right here and we'll be learning a message to the user when we're not

06:41.420 --> 06:43.770
able to fetch the location using alert.

06:43.880 --> 06:45.940
Let's go ahead and call alert a second time.

06:46.010 --> 06:50.590
Printing a message like unable to fetch location.

06:50.600 --> 06:51.370
This is going to print.

06:51.380 --> 06:55.700
If someone gets prompted to share their location with the browser but they click deny we're going to

06:55.700 --> 07:00.560
say hey we can't fetch the location if you don't give us that permission.

07:00.560 --> 07:03.300
Now the only case left is the success case.

07:03.350 --> 07:05.080
This is where we're going to admit the event.

07:05.090 --> 07:10.580
But before we do let's go ahead and simply logon to the screen so we can take a peek at what is happening

07:10.640 --> 07:13.430
inside of the position argument.

07:13.430 --> 07:14.990
I'm going to log this to the screen.

07:14.990 --> 07:23.110
Our server is going to restart and over inside of Google Chrome we can open up the developer tools refresh

07:23.110 --> 07:27.350
the page and we can click that send location button.

07:27.350 --> 07:29.900
Now this is going to work on desktop and mobile.

07:29.960 --> 07:35.780
Some mobile browsers are going to require you to be on HTP ass which is something that we're going to

07:35.780 --> 07:41.300
have set up for Heroku as you know the Heroku you are out is secure which means it's not going to work

07:41.330 --> 07:42.520
on localhost.

07:42.530 --> 07:47.080
You can always test your mobile browsers by deploying the app to Heroku and running there.

07:47.090 --> 07:50.750
For now though I will be able to click send a location.

07:50.750 --> 07:53.000
This is going to go ahead and start that process.

07:53.000 --> 07:55.180
The process can take up to a second.

07:55.260 --> 08:00.650
Now as you can see I did get my geo location position but I was ever prompted as to whether or not I

08:00.650 --> 08:02.210
wanted to share my location.

08:02.210 --> 08:07.460
That's because I've already given it permission over here I can go ahead and click click these settings

08:07.520 --> 08:09.170
for future visits.

08:09.170 --> 08:14.970
This means that I'm going to need to reauthorize if I refreshed the page and click send location again.

08:15.020 --> 08:18.270
You're going to see this little box which is probably going to show up for you.

08:18.290 --> 08:19.490
You can either block it.

08:19.580 --> 08:22.440
If I block it it's going to print unable to fetch location.

08:22.460 --> 08:23.960
Or you can accept it.

08:24.170 --> 08:27.710
I'm going to clear those settings one more time give the page a refresh.

08:27.830 --> 08:33.740
And this time I am going to accept the location sharing and we're going to get the geo location printing

08:33.770 --> 08:35.440
out in the con..

08:35.450 --> 08:39.250
Now once we get it we can go ahead and dive in the object itself is pretty simple.

08:39.320 --> 08:42.280
We have a time stamp of exactly when we fetch the data.

08:42.290 --> 08:46.040
This is useful if you're tracking a user over time which we're not doing.

08:46.040 --> 08:47.570
We also have our coordinates.

08:47.720 --> 08:52.040
We have all sorts of properties we're not going to use like accuracy altitude which doesn't exist.

08:52.040 --> 08:55.540
And other related ones we also have speed which is knowl.

08:55.610 --> 09:02.640
The only tool we're ever going to use off this object is latitude and longitude which do indeed exist.

09:02.660 --> 09:08.030
This is the information we want to pass to the server to the server can send it to everybody else.

09:08.030 --> 09:14.140
This means we're going to go into the position object go into the records object and grab those two.

09:14.480 --> 09:16.740
Let's go ahead and do that over inside of Adam.

09:16.760 --> 09:24.630
We are going to call socket dot emit and we're going to emit a brand new event.

09:24.650 --> 09:27.060
One we do not have registered yet.

09:27.160 --> 09:34.300
We're going to call this one create a location message create a location message is not going to take

09:34.300 --> 09:35.560
the standard text.

09:35.560 --> 09:39.790
Instead it's going to take those long tattoo'd and latitude coordinates.

09:39.790 --> 09:43.620
We're going to specify both of them starting with latitude.

09:43.740 --> 09:50.910
We want to set latitude equal to position dot cords dot latitude.

09:50.930 --> 09:55.070
This is the variable that we explored over inside of the council and we're going to do the same thing

09:55.070 --> 10:07.240
for a long itude study an equal to position dot cord's dot latitude awesome now that we have this in

10:07.240 --> 10:12.280
place we can actually go ahead and listen for this event over in the server and when we get it all we're

10:12.280 --> 10:16.410
going to do is pass this data along to all the connected users.

10:16.420 --> 10:18.080
Let's go ahead and do just that.

10:18.100 --> 10:24.310
Over inside of server J s registering a new event listener I'm going to remove the old commented out

10:24.310 --> 10:29.590
broadcast call that's no longer needed in create message and just below create message.

10:29.590 --> 10:34.210
We're going to call socket dot on again specifying a listener for this event.

10:34.210 --> 10:40.710
Create a location message just as we defined it over inside of index.

10:40.750 --> 10:47.550
J.S. now we are using iOS 6 since we're in node which means we can go ahead and set up our arrow function.

10:47.720 --> 10:53.730
We're going to have one argument this is going to be chord's and we can go ahead and finish off the

10:53.730 --> 10:55.150
arrow function in here.

10:55.140 --> 10:58.580
We're going to be able to run whatever code we like for the moment.

10:58.590 --> 11:02.640
All we're going to do is emit a new message event passing along the coordinates.

11:02.640 --> 11:08.980
Although in part two we'll be making this a lot nicer setting up that you are out for Google Maps.

11:09.120 --> 11:11.530
Right now though we're going to call Oakshott emit.

11:11.670 --> 11:17.070
We're going to emit a new message event and we're going to go ahead and provide the necessary data by

11:17.070 --> 11:19.690
calling generate message.

11:19.920 --> 11:23.620
For the moment generate message is going to take some bogus user name.

11:23.700 --> 11:29.190
I'm going to go ahead and type in admin and we are going to set the text for now we're simply going

11:29.190 --> 11:31.290
to set it equal to the coordinates.

11:31.290 --> 11:33.790
Let's go ahead and use a template string to set that up.

11:33.840 --> 11:41.260
We're going to first inject the latitude which is available on cord's dot latitude then we're going

11:41.260 --> 11:49.930
to go ahead and add a comma a space and we'll inject the long itude chords dot long into.

11:50.360 --> 11:51.190
Excellent.

11:51.230 --> 11:56.750
Now that we have this call in place the location information is going to get passed back and forth between

11:56.840 --> 12:00.500
the users and we can go ahead and actually prove this over inside of the browser.

12:00.560 --> 12:05.010
I'm going to give this page a refresh and I'm also going to open up a second tab.

12:06.330 --> 12:09.120
In the second tab I'm going to click send location.

12:09.120 --> 12:13.270
It's not going to prompt me if I want to share my location since I've already told it.

12:13.380 --> 12:18.450
I do want to share my location with this tab and right here you can see we have our admen message and

12:18.450 --> 12:19.790
we have our latitude.

12:19.890 --> 12:25.110
But unfortunately the long itude is undefined most likely because we typed it incorrectly somewhere

12:25.110 --> 12:25.950
along the way.

12:26.140 --> 12:29.000
I'm going to head back into Adam real quick and take a peek.

12:29.520 --> 12:32.250
And right here you can see I forgot the end in long itude.

12:32.310 --> 12:37.920
If I go ahead and add that and save the file and go back into the browser we should be able to do this

12:37.920 --> 12:40.680
once again getting both pieces of information.

12:40.680 --> 12:45.450
I'm going to refresh both tabs to load the latest version of our index file over inside of the first

12:45.450 --> 12:49.950
one we're going to send the location and the second one is going to be responsible for receiving it.

12:50.190 --> 12:51.570
Let's send the location off.

12:51.600 --> 12:55.920
Remember this takes about a second for your browser to get the coordinates and then it emits the message

12:55.920 --> 13:00.470
and right here you see we have the coordinates both the long itude and the latitude.

13:00.480 --> 13:02.670
We also have it over inside of the second tab.

13:02.670 --> 13:07.970
If I take this information we can actually Google it and prove that it is working as expected.

13:08.010 --> 13:13.260
Now in the next video part two we're going to be setting up a nice link so this information isn't visible.

13:13.270 --> 13:17.340
It'll be there but the user doesn't really need to know the coordinates what they really want is a link

13:17.490 --> 13:18.650
to a map.

13:18.660 --> 13:19.780
That's what we're going to set up.

13:19.860 --> 13:22.880
But for now we can put this in Google.

13:22.970 --> 13:26.750
Google is going to show us exactly where it is and the coordinates are indeed correct.

13:26.870 --> 13:31.850
I am in Philadelphia filming this video which means the location was correctly fetched for these local

13:31.850 --> 13:33.220
host tabs.

13:33.320 --> 13:36.650
With this in place we are now done Part 1.

13:36.650 --> 13:41.000
We're not going to go ahead and actually make a commit since we're not done with the feature.

13:41.060 --> 13:44.460
We're simply going to leave things as they are and move on to part two.

13:44.600 --> 13:49.400
Let's take just a quick moment to recap what we did because we covered quite a bit of new information

13:49.400 --> 13:50.240
here.

13:50.270 --> 13:55.880
Now the first thing we did is we gave a new button to the user this new button is going to allow them

13:55.880 --> 13:58.090
to click it to send the location.

13:58.180 --> 14:01.110
All of the heavy lifting happened over inside of index.

14:01.130 --> 14:02.750
J.S. in here.

14:02.750 --> 14:08.000
We set up a click listener for that send location button which means every time a user clicks it we

14:08.060 --> 14:09.050
do something.

14:09.050 --> 14:09.790
Now what do we do.

14:09.890 --> 14:13.180
Well first we make sure they have access to the geolocation API.

14:13.310 --> 14:14.990
If they do that's great.

14:14.990 --> 14:17.200
If not we simply print a message.

14:17.330 --> 14:20.510
If they do have access we go ahead and try to fetch the location.

14:20.510 --> 14:22.760
This can either succeed or fail if it fails.

14:22.760 --> 14:24.550
Once again we just give them a little message.

14:24.560 --> 14:31.700
If it succeeds we actually emit an event with the long tattoo'd and latitude to the server the server

14:31.700 --> 14:38.550
gets that information and it emits a new message of that to all clients and that renders it to the screen.

14:38.870 --> 14:41.400
It is as good of a place as any to stop.

14:41.400 --> 14:43.550
We are going to continue on in the next video.

14:43.580 --> 14:48.100
Wrapping up the geo location API in part to stay tuned I'll see you then.
