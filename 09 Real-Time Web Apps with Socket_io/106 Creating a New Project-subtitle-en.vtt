WEBVTT

00:00.480 --> 00:06.090
Before you can add sockets to your web application you need a web application to add them to and that

00:06.090 --> 00:08.460
is exactly what we're going to do in this video.

00:08.490 --> 00:12.630
We're going to make a basic express app we're going to get it up on get hub and we're going to deploy

00:12.630 --> 00:15.860
it to Heroku so we can view it live in the browser.

00:16.080 --> 00:19.010
Now the first step to that process is going to be to make a directory.

00:19.200 --> 00:23.130
We're going to do a few things together to get us all going in the right direction and they'll be a

00:23.130 --> 00:28.510
few challenges scattered throughout this one when we're covering something we've already done before.

00:28.560 --> 00:34.440
The first step in the process from the desktop is going to be to run and Diyar to make a new directory

00:34.440 --> 00:35.580
for this project.

00:35.760 --> 00:39.760
I'm going to call mine node hyphen chat hyphen app.

00:39.940 --> 00:45.260
Then we can use C-D to navigate into that directory and we can run a few commands.

00:45.330 --> 00:50.700
First up and PM in it as with all of our projects in this course we are going to be taking advantage

00:50.760 --> 00:51.770
of and PM.

00:51.870 --> 00:57.810
So we're going to run this command and use enter to use the default value for every option.

00:57.810 --> 00:59.800
When we're done we can type yes.

00:59.910 --> 01:01.630
And now we have the package.

01:01.650 --> 01:03.080
Jason File.

01:03.150 --> 01:09.350
Before we move into Adam We're also going to run get in it to initialize a new get repository.

01:09.370 --> 01:14.010
We're going to be putting this project under version control using get and we're also going to be using

01:14.280 --> 01:21.240
to push to get hub and to Heroku with this in place I can use clear to clear the terminal output and

01:21.240 --> 01:27.850
we can move into atom and we can start by opening up the folder and setting up our basic app structure.

01:28.760 --> 01:34.250
I'm going to open up the folder which we just created on the desktop called node chat app and then here

01:34.250 --> 01:37.090
we're going to get started by making a couple directories.

01:37.120 --> 01:41.930
Now unlike the other apps in this course the chat app is going to have a front end which means we're

01:41.930 --> 01:43.520
going to be writing some DML.

01:43.520 --> 01:47.960
We're going to be adding some styles and we're going to be writing some javascript code that runs in

01:47.960 --> 01:50.630
the browser as opposed to running on the server.

01:50.780 --> 01:53.630
For this to work we're going to have two folders.

01:53.630 --> 01:59.360
One is going to be called server which is going to store all of our node JSE code and the other one

01:59.360 --> 02:00.590
is going to be called public.

02:00.590 --> 02:06.860
This is going to store our styles our HVM l files and our client side javascript.

02:06.860 --> 02:11.780
Now inside of server just like we did for the to do API we're going to have a server.

02:11.810 --> 02:15.780
J.S. file and this is going to be the root of our node application.

02:15.830 --> 02:21.470
This file is going to do stuff like create a new Express app configure the public directory to the static

02:21.500 --> 02:28.700
folder express serves up and finally it'll call app Listen to start up the server inside of public what

02:28.700 --> 02:36.440
we're going to do for this video is create just one file index dot HVM index dot h team is going to

02:36.440 --> 02:40.050
be the markup page we serve when someone visits the app.

02:40.070 --> 02:44.240
And for now we're going to make a really simple one that just prints a message to the screen so we can

02:44.240 --> 02:50.780
confirm it's properly getting served up in the next video we'll worry about integrating socket I O on

02:50.840 --> 02:51.890
the client.

02:51.890 --> 02:56.720
For now though we're going to provide a doc type so the browser knows which version of aged female We

02:56.720 --> 02:57.580
want to use.

02:57.680 --> 03:02.360
We're telling it to use HVM which refers to HCM L5.

03:02.360 --> 03:05.750
Next up we're going to open and close our HTL mouth tag.

03:05.750 --> 03:11.270
This is going to let us provide the head and body tag which is exactly what we're going to need to do

03:11.270 --> 03:13.490
to get things working.

03:13.520 --> 03:15.950
First up is head inside of head.

03:15.950 --> 03:18.780
We can provide various configuration tags.

03:18.860 --> 03:24.530
We're going to use just one for now Mehta So we can tell the browser which Chaar set we want to use

03:24.980 --> 03:31.040
on the metal tag we're going to provide the char set attribute setting an equal to inside of quotes

03:31.100 --> 03:33.680
UTF 8.

03:33.680 --> 03:39.070
Next up we're going to provide the body tag inside of HVM all this contains the H-E mail.

03:39.080 --> 03:41.190
We want to actually render to the screen.

03:41.300 --> 03:46.340
And what we're going to do for this one is render a p tag paragraph and we're going to have some simple

03:46.340 --> 03:49.940
text like welcome to the chat app.

03:49.940 --> 03:52.390
This is all that's going to show up for the moment.

03:52.490 --> 03:54.650
I'm going to go ahead and close the paragraph tag.

03:54.660 --> 03:59.040
Now we can move outside of the TNL file going back into the server file.

03:59.120 --> 04:03.070
We want to set up this server to serve the public directory.

04:03.260 --> 04:09.140
Now unlike the original express application we created a server dodgiest file is not in the root of

04:09.140 --> 04:13.500
the project which means we have to go up a directory from server to node.

04:13.520 --> 04:16.560
Chat App and then we have to go into public.

04:16.580 --> 04:21.080
This is going to make it a little hard to set up the Express middleware but we're going to do is take

04:21.080 --> 04:26.720
a look at a built in node module that makes it really easy to convert paths.

04:26.800 --> 04:31.790
Now in order to show you what I'm talking about let's go ahead and use two cons. dot log calls.

04:31.910 --> 04:35.150
The first council call is going to show us how we used to do it.

04:35.210 --> 04:39.980
And the second one is going to show us the better way to do it inside of the first one we're going to

04:39.980 --> 04:45.920
do is provide the same path we provided for our very first express app.

04:45.920 --> 04:51.410
We use underscore underscore Der. name to reference the current directory which in this case is the

04:51.410 --> 04:52.530
server directory.

04:52.550 --> 04:59.690
Because the files inside of the server folder then we can cannonade forward slash public.

04:59.750 --> 05:04.820
Now in this case we do not have a public folder in the server folder the public folder and the server

05:04.820 --> 05:10.190
folder at the exact same level which means we need to use dot dot to call up a directory and then we

05:10.190 --> 05:11.510
need to go into public.

05:11.510 --> 05:16.250
This is the old way to do things and if we run this in the terminal we can see why it looks a little

05:16.250 --> 05:16.890
weird.

05:17.200 --> 05:21.960
I'm going to use gnomon to run server forwards slash server japes.

05:22.040 --> 05:28.250
And what we get is this path we go into users and through desktop the project folder which is expected.

05:28.430 --> 05:32.060
Then we go into server out of server and into public.

05:32.060 --> 05:33.840
This is absolutely unnecessary.

05:33.920 --> 05:41.150
But we'd like to do is just go from the project folder right into public keeping a clean cross OS compatible

05:41.240 --> 05:43.360
path in order to do that.

05:43.400 --> 05:47.770
We're going to use a module that comes with node called Path.

05:47.810 --> 05:52.610
As always I want to show you where the documentation lives because path has plenty of methods that we

05:52.610 --> 05:54.020
won't be using here.

05:54.410 --> 05:54.830
Node.

05:54.850 --> 05:55.320
Jay Yes.

05:55.350 --> 05:57.600
Dot org is where we can find the docs.

05:57.740 --> 06:02.350
We're going to go to that docs page and then we're going to go to the API reference page.

06:02.360 --> 06:07.940
This is a list of all the modules we have available to us where using the path module and inside of

06:07.940 --> 06:13.430
path the method we're going to be using is join which you can see right here if you click it you can

06:13.430 --> 06:19.640
go to a little example of how joyn works join it takes your partial path and it joins them together

06:19.940 --> 06:24.030
which means the example below results in the following path.

06:24.050 --> 06:26.340
We start with foo which you see right here.

06:26.390 --> 06:33.230
We then go into bar which also shows up we go into Baz forward slash SDF which does indeed show up.

06:33.380 --> 06:35.250
The next part is the interesting part.

06:35.330 --> 06:37.860
We go into this queue structure.

06:38.000 --> 06:44.920
Then we go out using dot dot and you can see the result path doesn't show us going into and out of like

06:44.990 --> 06:45.850
our path does.

06:45.850 --> 06:52.610
Over inside of the terminal instead it resolves that into the final path where the queue you x directory

06:52.610 --> 06:54.000
is nowhere in sight.

06:54.020 --> 06:59.180
We're going to use this exact same method to clean up our path over inside an atom.

06:59.240 --> 07:04.720
We can load in the path module by creating a constant called Path and requiring it.

07:04.730 --> 07:07.670
Remember this one does not need to be installed.

07:07.670 --> 07:09.560
It has a built in module.

07:09.620 --> 07:12.680
You have access to it without using any PM.

07:12.680 --> 07:19.710
Next up we're going to make a variable called public path I'm going to make that a constant variable

07:19.710 --> 07:25.590
since we're not going to be making any changes to it and we're going to call path dot join.

07:25.590 --> 07:28.530
We'll pass them arguments into pathed join in a moment.

07:28.530 --> 07:35.520
Before we do though I'm going to console dialog public path now inside of Patkar join what we want to

07:35.520 --> 07:39.500
do is take these two paths but pass them in a separate arguments.

07:39.540 --> 07:43.840
We do still want to start in the D'oh name and directory the server folder.

07:44.010 --> 07:49.650
Then as the second argument we're going to specify the relative path inside of quotes we're going to

07:49.650 --> 07:55.090
go out a directory using dot dot then we're going to use forward slash to go into the public folder.

07:55.110 --> 07:59.430
I'm going to save the server file and we should now be able to go back to the terminal and see our new

07:59.430 --> 08:03.990
path and here it is instead of going into server and then going out like we do above.

08:03.990 --> 08:07.410
We go right into the public directory which is ideal.

08:07.440 --> 08:14.070
This is the path we want to provide to the Express static middleware now that we have this public path

08:14.130 --> 08:18.220
variable in place it's time for your first of two challenges.

08:18.310 --> 08:24.320
This challenge is going to be for you to set up Express locally before we get into the challenge details

08:24.330 --> 08:29.670
we are going to install it together using NPM I the module name is express and we're going to use the

08:29.670 --> 08:35.920
most recent version at four point fourteen point zero with the Save flag.

08:36.150 --> 08:40.960
I'm going to run the installer then we can go ahead and actually use it inside of server.

08:40.990 --> 08:41.480
Yes.

08:41.580 --> 08:46.230
In packaged out Jason we now have it sitting right here with this in place.

08:46.230 --> 08:47.660
Here is your challenge.

08:47.700 --> 08:52.580
You're going to create a brand new Express application and you're also going to configure the Express

08:52.590 --> 08:56.720
static middleware like we've done previously to serve up the public folder.

08:56.760 --> 09:01.740
Finally you're going to call app to listen on port 3000 you're going to provide one of those little

09:01.740 --> 09:07.290
callback functions to print a message to the terminal like server is up on port three thousand.

09:07.470 --> 09:12.450
Once you have the server created you're going to start it up inside of the terminal and head to localhost

09:12.570 --> 09:14.780
3000 in side of the browser.

09:14.940 --> 09:19.970
If I go there right now we're going to get an error because there is no server running on that port.

09:19.980 --> 09:25.200
You should be able to refresh this page and see the little message we typed in the paragraph tag over

09:25.200 --> 09:27.980
inside of index dot HVM.

09:28.260 --> 09:29.990
So take a moment to knock that out.

09:30.000 --> 09:34.250
You can use anything we've done previously in the course we have done all of this before.

09:34.260 --> 09:38.060
You can also use Google or any other resources if you get stuck.

09:38.220 --> 09:46.020
Take a moment to fill out server test it and when you're done click play.

09:46.020 --> 09:46.530
All right.

09:46.530 --> 09:49.460
Hopefully you were able to get that done without too much trouble.

09:49.470 --> 09:55.440
The first thing I'm going to do is load in express by creating a constant called Express and requiring

09:55.500 --> 09:57.680
the library we just installed.

09:57.690 --> 10:03.450
Next up you needed to make an app variable where we can configure our express application.

10:03.450 --> 10:08.220
I'm going to make a variable called app and said equal to a call to express.

10:08.220 --> 10:10.980
Remember we don't configure express by passing in arguments.

10:10.980 --> 10:17.250
Instead we can figure express by calling methods on app to create routes add middleware or start up

10:17.260 --> 10:18.270
the server.

10:18.270 --> 10:23.850
First up we're going to be calling app use to configure our express static middleware.

10:23.880 --> 10:26.170
This is going to serve up that public folder.

10:26.370 --> 10:31.230
What you needed to do was call Express dot static passing in the path.

10:31.320 --> 10:36.650
We created a public path variable which stores exactly the path we need.

10:36.660 --> 10:39.560
The last thing to do is call app dot.

10:39.690 --> 10:44.510
Listen this is going to start up the server on port three thousand and we're going to provide a callback

10:44.520 --> 10:47.830
function as a second argument to print a little message to the terminal.

10:47.910 --> 10:57.620
Once the server is up I'm going to use console dot Lague to print server is up on port three thousand.

10:57.810 --> 11:03.570
With this in place we can now start up the server over inside the terminal and make sure our index team

11:03.650 --> 11:06.140
l file shows up in the browser.

11:06.240 --> 11:12.000
I'm going to go ahead and use clear to clear the terminal output then I'll use gnomon to run the server

11:12.480 --> 11:14.340
server forward slash server.

11:14.350 --> 11:19.380
Jay ass here we get our little message server is up on port three thousand and over in the browser.

11:19.380 --> 11:22.260
If I give things are refreshed we get our markup.

11:22.260 --> 11:24.560
Welcome to the chat app.

11:24.590 --> 11:26.400
This is fantastic.

11:26.400 --> 11:33.180
We now have a basic server set up which means in the next video we can actually add socket I O on both

11:33.240 --> 11:35.390
the client and the back end.

11:35.700 --> 11:41.630
Now before we go we are going to do just one more challenge getting things on get hub and Heroku while

11:41.730 --> 11:47.250
we are going to do first inside of atom is set up a few things we do need to set up a get ignore file

11:47.610 --> 11:48.370
right here.

11:48.480 --> 11:52.800
We're going to provide that in the route of the project inside of get ignore.

11:52.800 --> 11:57.370
Once again the only thing we'll be ignoring is the node modules directory.

11:57.390 --> 12:02.880
We do not want to commit any of this code to our repo because it can be generated using NPM install

12:03.030 --> 12:04.790
and it's subject to change.

12:04.800 --> 12:08.340
It's a real pain to manage that sort of thing and is not recommended.

12:08.400 --> 12:09.500
You commit it.

12:09.630 --> 12:13.800
The next thing we're going to do is configure a few things for her Roku.

12:13.800 --> 12:17.240
First up if you remember we have to use that process.

12:17.280 --> 12:19.940
Ian vidette port environment variable.

12:20.000 --> 12:25.030
I'm going to create a constant port right here sending an equal to process.

12:25.110 --> 12:31.230
Ian V dot uppercase port or 3000 which we'll use locally.

12:31.230 --> 12:36.540
Now we can provide port here and we can provide it in the message down below by changing our regular

12:36.540 --> 12:44.840
string over to a template string server is up on an island ject the port variable value.

12:44.880 --> 12:49.140
Now that we have that in place the next thing we need to change in order to get our app set up for Heroku

12:49.410 --> 12:52.220
that part of our challenge is to update the package.

12:52.230 --> 12:59.760
Scott Jason file adding a start script and specifying the version of node we want to use under scripts.

12:59.760 --> 13:05.000
I'm going to add a start script telling Heroku how to start the application in order to start the app.

13:05.010 --> 13:06.690
You have to run the node command.

13:06.930 --> 13:11.070
You're going to go into the server directory on the file to started up is server.

13:11.110 --> 13:12.110
Jay Yes.

13:12.300 --> 13:15.250
We're also going to specify engines which we've done before.

13:15.450 --> 13:20.280
Engines as you know lets you tell Heroku which version of node to use.

13:20.280 --> 13:25.200
This is going to be important as we are taking advantage of some features only available in the latest

13:25.200 --> 13:27.300
versions of node right here.

13:27.390 --> 13:32.880
I'm going to provide the exact same key value pair I used previously setting node equal to six point

13:32.880 --> 13:34.230
to point two.

13:34.270 --> 13:39.690
If you're using a different version of node you can provide that here instead of the version I have

13:40.100 --> 13:43.280
now that we have this in place you are ready for your challenge.

13:43.350 --> 13:48.630
Your challenge is going to be to make a commit with all of the current uncommitted files you're going

13:48.630 --> 13:54.340
to then go in to get how and create a good hub repository and you're going to push your local code up.

13:54.420 --> 13:59.370
Make sure the code actually gets on get how you can do that by refreshing the get have repo page and

13:59.370 --> 14:03.420
you should see your directory structure right there on the repo.

14:03.420 --> 14:08.910
The next thing you need to do is create a Heroku application and deploy to it once your application

14:08.910 --> 14:09.630
is deployed.

14:09.630 --> 14:14.970
You should be able to visit the app you are at on the browser and you should see the exact same message

14:15.120 --> 14:16.620
as the one we have here.

14:16.620 --> 14:21.300
Welcome to the chat app should print but instead of being on localhost three thousand you should be

14:21.360 --> 14:23.960
on the actual Heroku app.

14:24.150 --> 14:28.920
Now we already made all the changes necessary inside of the project we configured the port variable

14:28.920 --> 14:30.960
and we set up our scripts and engines.

14:31.020 --> 14:33.280
So you don't have to make any more code changes.

14:33.360 --> 14:38.160
You just need to work your wizardry in the browser and in the terminal to get this done.

14:38.280 --> 14:43.100
Take a moment to knock that out add the get hub repo deployed to Heroku test it.

14:43.110 --> 14:47.620
And when you're done click play all right.

14:47.620 --> 14:50.020
Hopefully you didn't have too much trouble getting that done.

14:50.050 --> 14:54.940
The first step while the one I'm going to take first anyways is to make a new get hub repository we

14:54.940 --> 14:57.230
need a place to push up our code.

14:57.340 --> 15:03.400
I'm going head over to get dotcom click that big green new repository button and we can make a new one.

15:03.460 --> 15:08.680
I'm going to call my repository node course to chat app.

15:08.710 --> 15:12.430
I am going to leave this public and I am going to actually create it.

15:12.610 --> 15:15.550
Now that we're here we have a list of commands we can use.

15:15.610 --> 15:21.340
We have an existing repository we want to push it so we can copy these lines over in the terminal before

15:21.340 --> 15:22.740
we can actually push anything.

15:22.760 --> 15:25.420
We do need to make a commit.

15:25.420 --> 15:32.060
I'm going to shut down gnomon and run get status right here you see we have our expected files we have

15:32.060 --> 15:37.430
the publican's server folder we have good ignore and package Scott Jason Noad underscore modules is

15:37.430 --> 15:38.650
nowhere in sight.

15:38.720 --> 15:43.950
Then you needed to use it get at it to add to these untracked files to the next commit.

15:44.210 --> 15:47.180
If you run get status again you can see everything does look good.

15:47.270 --> 15:50.910
We have four changes to be committed for new files.

15:50.960 --> 15:57.330
I'm going to run get commit with the the flag to specify a message the flag is not required to send

15:57.330 --> 16:01.290
some of the files are already added right here in it.

16:01.320 --> 16:03.420
It is going to get the job done.

16:03.800 --> 16:08.060
Once you have that commit in place you can actually push it up to get Hubei running the two lines they

16:08.060 --> 16:09.040
gave you.

16:09.100 --> 16:14.570
I'm going to run both of those and it's now up on get Haab we can confirm that by refreshing the page

16:14.810 --> 16:20.210
and instead of seeing the instructions we see the files we created the next and last thing to do was

16:20.210 --> 16:22.010
get the app on Heroku.

16:22.070 --> 16:25.270
You don't actually have to go to the Heroku web app to get that done.

16:25.280 --> 16:33.950
We can run Heroku create right here we can go ahead and create the application then we can use get push

16:35.140 --> 16:38.070
Heroku master to deploy the app.

16:38.310 --> 16:42.990
I'm going to go ahead and run that this is going to take my local code push it up to Heroku Heroku is

16:42.990 --> 16:45.330
going to see that new code was pushed.

16:45.330 --> 16:48.370
It's then going to go ahead and deploy it once it's up.

16:48.420 --> 16:53.670
We can use the Heroku open command to open up the app you are in the browser or you can always grab

16:53.670 --> 16:55.260
the you are all right here.

16:55.440 --> 16:58.920
I'm going to copy that you are Al from up above head into the browser.

16:58.920 --> 17:05.370
Paste it and right here we should see our app and we do welcome to the chat application shows up to

17:05.370 --> 17:06.020
the screen.

17:06.120 --> 17:08.500
And with this in place we are done.

17:08.730 --> 17:12.670
We have a basic express server we have a backend and a front end.

17:12.690 --> 17:18.840
It's up on get hub and it's up on Heroku we are ready to move on to the next video where we are actually

17:18.900 --> 17:21.430
going to start integrating a socket I O.

17:21.600 --> 17:23.100
I'm super excited to get to it.

17:23.100 --> 17:24.080
So stay tuned.

17:24.090 --> 17:25.840
I will see you next time.
